{
  {
    text = "{\
  [ \"edit.default_extension\" ] = \"lua\",\
  [ \"paint.default_extension\" ] = \"nfp\",\
  [ \"shell.autocomplete\" ] = true,\
  [ \"list.show_hidden\" ] = false,\
  [ \"shell.allow_disk_startup\" ] = false,\
  [ \"shell.allow_startup\" ] = true,\
  [ \"bios.use_multishell\" ] = true,\
  [ \"lua.autocomplete\" ] = true,\
  [ \"edit.autocomplete\" ] = true,\
}",
    path = ".settings",
  },
  {
    text = "--Advanced read API\
--0.8\
\
function read(trm, x,y, xSize, text, char)\
  local pointer = 1\
  local posS = 1\
  local posE = xSize-1\
  if text then\
    pointer = #text+1\
    if #text > xSize then\
      posS = #text-xSize+2\
      posE = #text\
    end\
  end\
  local text = text or \"\"\
  local textCleaner = \"\"\
  for i=1,xSize do\
    textCleaner = textCleaner..\" \"\
  end\
\
  local function redrawText()\
\
    trm.setCursorPos(x,y)\
    trm.write(textCleaner)\
\
    local txt = text\
    if #text >= xSize-4 then\
      txt = string.sub(text, posS, posE)\
    end\
    trm.setCursorPos(x,y)\
    if not char then\
      trm.write(txt)\
    else\
      for i=1, #txt do\
        trm.write(char)\
      end\
    end\
    if posS > 1 then\
      trm.setCursorPos(x,y)\
      trm.write(\"..\")\
    end\
    if posE < #text then\
      trm.setCursorPos(x+xSize-2,y)\
      trm.write(\"..\")\
    end\
  end\
\
  redrawText()\
\
  while true do\
    local ev, sd, mx, my = os.pullEvent()\
    -- trm.setCursorPos(x+pointer-posS, y)\
    -- trm.setCursorBlink(true)\
    if ev == 'key' then\
      if sd == keys.enter then\
        trm.setCursorBlink(false)\
        return text\
      elseif sd == keys.backspace and pointer > 1 then\
        if pointer > #text then\
          text = string.sub(text, 0, #text-1)\
        else\
          text = string.sub(text, 0, pointer-2)..string.sub(text, pointer, #text)\
        end\
        pointer = pointer-1\
        if x+pointer-posS < x+xSize-3 and posS > 1 then\
          posS = posS-1\
          if #text < xSize-4 then\
            posS = 1\
          end\
          posE = posS+xSize-2\
        end\
      elseif sd == keys[\"end\"] then\
        pointer = #text + 1\
\
        if x+pointer-posS > x+xSize-3 then\
          posS = #text-xSize+3\
          posE = #text\
        end\
      elseif sd == keys.home then\
        pointer = 1\
\
        posS = 1\
        posE = xSize-2\
      elseif sd == keys.delete then\
        if pointer <= #text then\
          text = string.sub(text, 0, pointer-1)..string.sub(text, pointer+1, #text)\
          if #text < xSize-4 then\
            posE = xSize-2\
          end\
        end\
      elseif sd == keys.left then\
        if pointer > 1 then\
          pointer = pointer - 1\
          if x+pointer-posS < x+math.floor(xSize/2) and posS > 1 then\
            posS = posS-1\
            if #text < xSize-4 then\
              posS = 1\
            end\
            posE = posS+xSize-2\
          end\
        end\
      elseif sd == keys.right then\
        if pointer < #text+1 then\
          pointer = pointer + 1\
          if x+pointer-posS > x+math.floor(xSize/2) then\
            posS = posS+1\
            posE = posS+xSize-1\
          end\
        end\
      end\
    elseif ev == 'char' and sd ~= nil then\
      text = string.sub(text, 0, pointer-1)..sd..string.sub(text, pointer, #text)\
      pointer = pointer + 1\
      if x+pointer-posS > x+xSize-2 then\
        posS = posS+1\
        posE = posS+xSize-2\
      end\
    elseif ev == \"paste\" then\
      text = text..sd\
      pointer = #text + 1\
      if #text > xSize then\
        posS = #text-xSize+2\
        posE = #text\
      else\
        posS = 1\
        posE = #text\
      end\
    elseif ev == \"mouse_click\" then\
      trm.setCursorBlink(false)\
      return text\
    elseif ev == \"mouse_scroll\" then\
      trm.setCursorBlink(false)\
      return text\
    end\
\
    redrawText()\
    trm.setCursorPos(x+pointer-posS, y)\
    trm.setCursorBlink(true)\
  end\
end",
    path = "System/APIs/advanced_read",
  },
  {
    text = "--Contexts\
--2.0\
\
local xSize, ySize = term.getSize()\
local comp = false\
\
local function usualText(string,xPos,yPos, trm)\
\009local trm = trm or term\
\009trm.setCursorPos(xPos,yPos)\
\009trm.write(string)\
end\
\
function main(...)\
\009local arg = {...}\
\009local waitFor = true\
\009local x = arg[1]\
\009local y = arg[2]\
\009local color = colors.gray\
\009local textColor = colors.white\
\009local maxLenth = 3\
\009local align = \"center\"\
\009local lenth\
\009local output\
\009local vertical_inverted\
\
\009if type(arg[3]) == \"table\" then\
\009\009if arg[3].color then\
\009\009\009color = arg[3].color\
\009\009end\
\009\009if arg[3].textColor then\
\009\009\009textColor = arg[3].textColor\
\009\009end\
\009\009if arg[3].lenth then\
\009\009\009lenth = arg[3].lenth\
\009\009end\
\009\009if arg[3].minLenth then\
\009\009\009maxLenth = arg[3].minLenth\
\009\009end\
\009\009if arg[3].align then\
\009\009\009align = arg[3].align\
\009\009end\
\009\009if arg[3].verticalInverted then\
\009\009\009vertical_inverted = arg[3].verticalInverted\
\009\009end\
\009\009table.remove(arg, 3)\
\009end\
\
\009if not lenth then\
\009\009for i=3,#arg do\
\009\009\009if #arg[i] > maxLenth then\
\009\009\009\009maxLenth = #arg[i]\
\009\009\009end\
\009\009end\
\009\009maxLenth = maxLenth + 2\
\009else\
\009\009maxLenth = lenth\
\009end\
\
\009local xend = x+maxLenth\
\009local yend = y+#arg-1\
\009if x+maxLenth > xSize then\
\009\009xend = x\
\009\009x = x-maxLenth+1\
\009end\
\009if y+#arg-1 > ySize then\
\009\009yend = y\
\009\009y = y-#arg\
\009\009vertical_inverted = true\
\009end\
\
\009local body = window.create(term.current(),x,y,maxLenth,0)\
\009body.setBackgroundColor(color)\
\009body.setTextColor(textColor)\
\009body.clear()\
\
\009local function drawItem(id)\
\009\009if align == \"center\" then\
\009\009\009usualText(arg[id+2],math.floor((maxLenth)/2)-math.floor(#arg[id+2]/2)+1,id+1, body)\
\009\009elseif align == \"left\" then\
\009\009\009usualText(arg[id+2],2,id+1, body)\
\009\009elseif align == \"right\" then\
\009\009\009usualText(arg[id+2],maxLenth-#arg[id+2],id+1, body)\
\009\009end\
\009end\
\
\009for i=3,#arg do\
\009\009if vertical_inverted then\
\009\009\009body.reposition(x,y+#arg-i,maxLenth,i)\
\009\009else\
\009\009\009body.reposition(x,y,maxLenth,i)\
\009\009end\
\009\009drawItem(i-2)\
\009\009sleep(0)\
\009end\
\
\009while waitFor do\
\009\009event, side, xp, yp = os.pullEvent()\
\009\009if event == 'mouse_click' then\
\009\009\009for i=1,#arg-2 do\
\009\009\009\009if xp >= x and xp <= xend and yp >= y and yp <= yend then\
\009\009\009\009\009if yp == y+i then\
\009\009\009\009\009\009local bk = term.redirect(body)\
\009\009\009\009\009\009paintutils.drawFilledBox(1,i+1,maxLenth,i+1,colors.lightGray)\
\009\009\009\009\009\009term.redirect(bk)\
\009\009\009\009\009\009drawItem(i)\
\009\009\009\009\009\009sleep(0.1)\
\009\009\009\009\009\009output = arg[i+2]\
\009\009\009\009\009\009body.setVisible(false)\
\009\009\009\009\009end\
\009\009\009\009end\
\009\009\009end\
\009\009\009return output\
\009\009end\
\009end\
end",
    path = "System/APIs/contexts",
  },
  {
    text = "--Image drawer API\
--1.1\
\
local Colors = {\
  [\"0\"] = 1,\
  [\"1\"] = 2,\
  [\"2\"] = 4,\
  [\"3\"] = 8,\
  [\"4\"] = 16,\
  [\"5\"] = 32,\
  [\"6\"] = 64,\
  [\"7\"] = 128,\
  [\"8\"] = 256,\
  [\"9\"] = 512,\
  [\"a\"] = 1024,\
  [\"b\"] = 2048,\
  [\"c\"] = 4096,\
  [\"d\"] = 8192,\
  [\"e\"] = 16384,\
  [\"f\"] = 32768\
}\
\
local function convert(mode,color)\
  if mode == \"from cc\" then\
    for key,value in pairs(Colors) do\
      if color == value then\
        return key\
      end\
    end\
  else\
    if color == \"#\" then\
      return \"0\"\
    else\
      return Colors[color]\
    end\
  end\
end\
\
function loadImage(path, format)\
  local Pixels = {}\
  local file\
  if type(path) == \"string\" then\
    file = fs.open(path,\"r\")\
  else\
    file = path\
  end\
  if file == nil then\
    file = fs.open('#SysRes/Images/imgerror.png','r')\
  end\
  local lineCounter = 1\
  while true and file do\
    local line = file.readLine()\
    Pixels[lineCounter]={}\
    if line ~= nil then\
      for i=1,#line,3 do\
        Pixels[lineCounter][(i+2)/3]={[\"symbol\"] = string.sub(line,i,i),[\"textColor\"] = convert(\"to cc\",string.sub(line,i+1,i+1)),[\"backColor\"] = convert(\"to cc\",string.sub(line,i+2,i+2))}\
      end\
      lineCounter = lineCounter + 1\
    else\
      break\
    end\
  end\
  if file then\
    file.close()\
  end\
\
  return Pixels\
end\
\
function draw(image,startX,startY,trm,cutX,cutY, threads)\
  if not trm then\
    trm = term\
  end\
  local threads = threads or 16\
\
  if type(image) == \"string\" then\
    image = loadImage(image)\
  elseif type(image) == \"table\" then\
  else\
    image = loadImage(\"#SysRes/Images/noicon.png\")\
  end\
\
  if not image or not image[1] then return end\
\
  if cutX == nil or cutY == nil then\
    cutX = #image[1]\
    cutY = #image-1\
  else\
    if cutY >= #image then cutY = #image-1 end\
    if cutX > #image[1] then cutX = #image[1] end\
  end\
\
  local drawfuncs = {}\
  if threads > cutX then\
    threads = cutX\
  end\
  if threads > cutY then\
    threads = cutY\
  end\
  local div = math.floor(math.sqrt(threads))\
\
  local verSize = math.floor(cutY/div)\
  local horSize = math.floor(cutX/div)\
\
  for ver=1,div do\
    for hor=1,div do\
      table.insert(drawfuncs, function()\
        for y=verSize*ver - verSize, verSize*ver do\
          if image[y] then\
            for x=horSize*hor - horSize, horSize*hor do\
              if image[y][x] and image[y][x][\"symbol\"] ~= \"#\" then\
                trm.setTextColor(image[y][x][\"textColor\"])\
                trm.setBackgroundColor(image[y][x][\"backColor\"])\
                trm.setCursorPos(startX+x-1,startY+y-1)\
                trm.write(image[y][x][\"symbol\"])\
              end\
            end\
          end\
        end\
      end)\
    end\
  end\
\
  parallel.waitForAll(unpack(drawfuncs))\
end",
    path = "System/APIs/images",
  },
  {
    text = "--ScreenWorks API\
--0.4\
\
local args = {...}\
local xSize, ySize = term.getSize()\
local screens = {}\
\
local function textToTable(text)\
  local words = {}\
\009local pos = 1\
\
\009for i = 1, #text do\
    if string.sub(text,i,i) == '\\\
' then\
      pos = pos + 1\
      words[pos] = '\\\
'\
\009\009elseif string.sub(text,i,i) ~= \" \" then\
\009\009\009if words[pos] == nil then\
\009\009\009\009words[pos] = \"\"\
\009\009\009end\
\009\009\009words[pos] = words[pos]..string.sub(text,i,i)\
\009\009else\
      if string.sub(text,i-1,i-1) ~= \" \" then\
\009\009\009  pos = pos + 1\
      else\
        if words[pos] == nil then\
  \009\009\009\009words[pos] = \"\"\
  \009\009\009end\
  \009\009\009words[pos] = words[pos]..\" \"\
      end\
\009\009end\
\009end\
  return words\
end\
\
local function printText(trm, text, x, y, size, align, color)\
  if color then\
    trm.setTextColor(color)\
  end\
  if not text then\
    text = \"\"\
  end\
\
  local words = textToTable(text)\
  if not words then\
    words = {\"\"}\
  elseif not words[1] then\
    words[1] = \"\"\
  end\
  local lines = {}\
  local pos = x+#words[1]\
  local elms = 1\
\
  lines[1] = words[1]..\" \"\
  for i=2, #words do\
    if words[i] == \"\\n\" or words[i] == \"\\\
\" then\
      elms = elms + 1\
      lines[elms] = \"\"\
      pos = x\
    elseif words[i] then\
      pos = pos + #words[i]\
      if pos <= size+x-1 then\
        lines[elms] = lines[elms]..words[i]..\" \"\
        pos = pos+1\
      else\
        lines[elms] = string.sub(lines[elms],1,#lines[elms]-1)\
        elms = elms + 1\
        lines[elms] = words[i]..\" \"\
        pos = x + #words[i]\
      end\
    end\
  end\
\
  lines[#lines] = string.sub(lines[#lines],1,#lines[#lines]-1)\
\
  if align == 'justify' then\
    local dim = size+2\
    for i=1,#lines do\
      if #lines[i] < dim-3 and #lines[i] > math.floor(dim/2 + dim/5) then\
        local j = 1\
        local space = 0\
        while j < #lines[i] and #lines[i] <= dim-3 do\
          if j < #lines[i] and string.sub(lines[i],j,j) == ' ' then\
            lines[i] = string.sub(lines[i],1,j)..string.sub(lines[i],j,#lines[i])\
            j = j + 3 + space\
          else\
            j = j + 1\
          end\
          if j >= #lines[i] then\
            j = 1\
            space = space + 1\
          end\
        end\
      end\
    end\
  end\
\
  for i=1, #lines do\
    for j=x,size+x-1 do\
      trm.setCursorPos(j,i+y-1)\
      trm.write(\" \")\
    end\
    if align == 'center' then\
      trm.setCursorPos(math.floor(size/2-#lines[i]/2)+x,i+y-1)\
      elseif align == 'right' then\
      trm.setCursorPos(size-#lines[i]+x,i+y-1)\
    else\
      trm.setCursorPos(x,i+y-1)\
    end\
    trm.write(lines[i])\
  end\
  return elms\
end\
\
local startInput = os.advancedRead\
\
function newScreen(textColor, backgroundColor, headerTextColor, headerColor, header, act, _X, _Y, _SizeX, _SizeY, _HeaderSizeY)\
  local obj = {}\
\
  local _HeaderSizeY = _HeaderSizeY or 2\
  local _X = _X or 1\
  local _Y = _Y or 1\
  local _SizeX = _SizeX or xSize\
  local _SizeY = _SizeY or ySize-_HeaderSizeY\
\
  obj.header = window.create(term.current(), _X, _Y, _SizeX, _HeaderSizeY)\
  obj.background = window.create(term.current(), _X, _Y + _HeaderSizeY, _SizeX, _SizeY)\
  obj.body = window.create(obj.background, 1, 1, _SizeX-1, _SizeY)\
\
  obj.scroller = window.create(obj.background, _SizeX, 1, 1, _SizeY)\
  obj.scrollerB = window.create(obj.scroller, 1, 1, 1, _SizeY)\
\
  local steping = 0\
  local scr_size\
  obj.buttons = {}\
\
  obj.setActive = function(state)\
    local state = state or false\
    obj.active = state\
    obj.header.setVisible(state)\
    obj.background.setVisible(state)\
    obj.body.setVisible(state)\
    obj.scroller.setVisible(state)\
  end\
\
  if act == nil then\
    obj.active = true\
  else\
    obj.setActive(act)\
  end\
\
  obj.redraw = function()\
    obj.background.redraw()\
    obj.body.redraw()\
    obj.header.redraw()\
    obj.scroller.redraw()\
  end\
\
  obj.remove = function()\
    for i=1, #screens do\
      if screens[i] == obj then\
        table.remove(screens, i)\
        break\
      end\
    end\
\
    obj.header.setVisible(false)\
    obj.body.setVisible(false)\
    obj.scroller.setVisible(false)\
\
    obj.header = nil\
    obj.body = nil\
    obj.scroller = nil\
\
    obj = nil\
  end\
\
  local function drawMenuDot()\
    obj.header.setCursorPos(xSize-5,1)\
    obj.header.write(\" ... \")\
  end\
\
  local function drawBackBtn()\
    obj.header.setCursorPos(1,1)\
    obj.header.write(\" < \")\
    obj.header.setCursorPos(1,2)\
    obj.header.write(\"   \")\
  end\
\
  obj.createMenu = function(...)\
    local args = {...}\
    obj.header.hasMenu = true\
    drawMenuDot()\
    os.loadAPI(\"#API/contexts\")\
\
    local menu = {}\
    menu.check = function(x,y)\
      if obj.active and y >= 1 and y <= 2 and x >= xSize-5 and x <= xSize-1 then\
        return true\
      end\
    end\
\
    menu.open = function()\
      obj.header.setBackgroundColor(colors.gray)\
      obj.header.setTextColor(colors.white)\
      drawMenuDot()\
      local answer = contexts.main(xSize-1,2,unpack(args))\
      obj.header.setBackgroundColor(headerColor)\
      obj.header.setTextColor(headerTextColor)\
      drawMenuDot()\
      obj.redraw()\
      return answer\
    end\
\
    return menu\
  end\
\
  obj.createBackBtn = function()\
    obj.header.hasBackBtn = true\
    drawBackBtn()\
\
    local btn = {}\
    btn.check = function(x,y)\
      if obj.active and y >= 1 and y <= 2 and x >= 1 and x <= 3 then\
        obj.header.setBackgroundColor(colors.gray)\
        obj.header.setTextColor(colors.lightGray)\
        drawBackBtn()\
        sleep(0)\
        obj.header.setBackgroundColor(headerColor)\
        obj.header.setTextColor(headerTextColor)\
        drawBackBtn()\
        return true\
      end\
    end\
\
    return btn\
  end\
\
  obj.scrollPos = 1\
  obj.scroll = function(n)\
    local xPos, yPos = obj.body.getPosition()\
    local sizeX, sizeY = obj.body.getSize()\
    local xx, yy = obj.scrollerB.getPosition()\
    if sizeY >= _SizeY+1 then\
      if n > 0 and yPos < 1 then\
        obj.body.reposition(1,yPos+n)\
        obj.scroller.clear()\
        obj.scrollPos = obj.scrollPos-steping*n\
        if obj.scrollPos < 1 then\
          obj.scrollPos = 1\
        end\
        if obj.scrollPos > _SizeY-scr_size+1 then\
          obj.scrollPos = _SizeY-scr_size+1\
        end\
        obj.scrollerB.reposition(1,math.ceil(obj.scrollPos))\
        -- if obj.scrollPos > _SizeY+1-scr_size then\
        --   obj.scrollerB.reposition(1,_SizeY+1-scr_size)\
        --   obj.scrollPos = _SizeY+1-scr_size\
        -- end\
        -- if yPos+n > 1 then\
        --   obj.body.reposition(1,1)\
        -- end\
      elseif n < 0 and yPos+sizeY > _SizeY+1 then\
        obj.body.reposition(1,yPos+n)\
        obj.scroller.clear()\
        obj.scrollPos = obj.scrollPos-steping*n\
        if obj.scrollPos < 1 then\
          obj.scrollPos = 1\
        end\
        if obj.scrollPos > ySize-scr_size-1 then\
          obj.scrollPos = ySize-scr_size-1\
        end\
        obj.scrollerB.reposition(1,math.ceil(obj.scrollPos))\
        -- if obj.scrollPos < 1 then\
        --   obj.scrollerB.reposition(1,1)\
        --   obj.scrollPos = 1\
        -- end\
        -- if yPos+n+sizeY < _SizeY then\
        --   obj.body.reposition(1,yPos+sizeY)\
        -- end\
      end\
      -- obj.header.redraw()\
    end\
  end\
\
  obj.resize = function(size)\
    local xPos, yPos = obj.body.getPosition()\
    local cX, cY = obj.body.getSize()\
    if size >= cY then\
      obj.body.reposition(xPos,yPos,_SizeX-1 ,size)\
    else\
      obj.body.reposition(1,1,_SizeX-1,size)\
      obj.scrollerB.reposition(1,1)\
    end\
    local xx, yy = obj.scrollerB.getPosition()\
    obj.scroller.reposition(_SizeX,1)\
    obj.scroller.clear()\
\
    scr_size = math.floor((_SizeY)/size * (_SizeY))\
    steping = ((_SizeY))/(size-1)\
\
    obj.scrollerB.reposition(1,yy,1,scr_size)\
  end\
\
  obj.setHeader = function(text)\
    header = text\
    obj.header.setTextColor(headerTextColor)\
    obj.header.setBackgroundColor(headerColor)\
    obj.header.clear()\
    obj.header.setCursorPos(math.floor(xSize/2)-math.floor(#tostring(header))/2+1,math.floor(_HeaderSizeY/2))\
    obj.header.write(header)\
    if obj.header.hasMenu then\
      drawMenuDot()\
    end\
    if obj.header.hasBackBtn then\
      drawBackBtn()\
    end\
  end\
\
  obj.writeLine = function(text, x,y, color, trm)\
    if not trm or (trm ~= obj.body and trm ~= obj.header) then\
      trm = obj.body\
    end\
    if not text then\
      text = \"\"\
    end\
\
    if not color then\
      trm.setTextColor(textColor)\
    else\
      trm.setTextColor(color)\
    end\
    trm.setCursorPos(x,y)\
    trm.write(text)\
  end\
\
  obj.writeText = function(text, x,y, size, align, color)\
    if not color then\
      color = textColor\
    end\
    return printText(obj.body, text, x, y, size, align, color)\
  end\
\
  obj.drawImage = function(x,y, path, sizeX,sizeY, threads)\
    local img = {}\
    img.x = x\
    img.y = y\
\
    if not sizeX or not sizeY then\
      sizeX, sizeY = os.getImageSize(path)\
    end\
\
    img.body = window.create(obj.body, x,y, sizeX,sizeY)\
    img.body.setBackgroundColor(backgroundColor)\
    img.body.clear()\
\
    os.drawImage(path, 1,1, img.body, sizeX, sizeY, threads)\
\
    img.setPosition = function(nx,ny)\
      img.x = nx\
      img.y = ny\
      img.body.reposition(nx, ny)\
      obj.redraw()\
    end\
\
    return img\
  end\
\
  obj.newButton = function(x,y, sizeX, sizeY, textColor, backgroundColor, text, align)\
\
    local btn = {}\
\
    btn.body = window.create(obj.body, x,y, sizeX,sizeY)\
    btn.x = x\
    btn.y = y\
\
    local function wrtText()\
      if text then\
        if not align then\
          align = \"center\"\
        end\
\
        if align == \"center\" then\
          btn.body.setCursorPos(math.floor(sizeX/2)-math.floor(#text/2)+1,math.floor(sizeY/2)+1)\
        elseif align == \"left\" then\
          btn.body.setCursorPos(1,math.floor(sizeY/2)+1)\
        elseif align == \"right\" then\
          btn.body.setCursorPos(sizeX-#text+1,math.floor(sizeY/2)+1)\
        end\
        btn.body.write(text)\
      end\
    end\
\
    local anim\
    local function animate()\
      local xPos, yPos = obj.body.getPosition()\
      local xPos2, yPos2 = obj.background.getPosition()\
      anim = window.create(term.current(),x+xPos+xPos2-2,y+yPos+yPos2-2,sizeX,sizeY)\
      anim.setBackgroundColor(colors.lightGray)\
      anim.clear()\
      sleep(0)\
      anim.setVisible(false)\
      anim.reposition(0,0,0,0)\
      btn.body.clear()\
      obj.body.redraw()\
      obj.header.redraw()\
      wrtText()\
    end\
\
    btn.body.setBackgroundColor(backgroundColor)\
    btn.body.clear()\
    btn.body.setTextColor(textColor)\
    wrtText()\
\
    btn.check = function(nx,ny, anime)\
      if anime == nil then\
        anime = true\
      end\
      local xPos, yPos = obj.body.getPosition()\
      local xPos2, yPos2 = obj.background.getPosition()\
      if obj.active and nx >= btn.x+xPos+xPos2-2 and nx <= btn.x+sizeX+xPos+xPos2-3 and ny-yPos-yPos2+2 >= btn.y and ny-yPos-yPos2+2 <= btn.y+sizeY-1 then\
        if anime then\
          animate()\
        end\
        return true\
      end\
    end\
    return btn\
  end\
\
  obj.newDropDownList = function(x,y,size, values, default, txtColor, backColor1, backColor2)\
    local menu = {}\
    os.loadAPI(\"#API/contexts\")\
    local txtColor = txtColor or headerTextColor\
    local backColor1 = backColor1 or colors.lightGray\
    local backColor2 = backColor2 or colors.gray\
    local default = default or \"\"\
    local size = size or 12\
\
    menu.x = x\
    menu.y = y\
    menu.opened = false\
\
    menu.values = values\
\
    if type(default) == \"number\" then\
      default = values[default]\
    end\
    menu.selected = default\
\
    menu.body = window.create(obj.body, x,y, size,1)\
    menu.body.setBackgroundColor(backColor1)\
    menu.body.setTextColor(txtColor)\
    menu.body.clear()\
\
    local function redraw()\
      menu.body.setBackgroundColor(backColor1)\
      menu.body.setTextColor(txtColor)\
      menu.body.clear()\
      menu.body.setCursorPos(2,1)\
      menu.body.write(menu.selected)\
      menu.body.setCursorPos(size-2,1)\
      if not menu.opened then\
        menu.body.setTextColor(backColor2)\
      else\
        menu.body.setTextColor(backColor1)\
        menu.body.write(\" \"..string.char(7)..\" \")\
        sleep(0.1)\
        menu.body.setCursorPos(size-2,1)\
        menu.body.setBackgroundColor(backColor2)\
      end\
      menu.body.write(\" \"..string.char(7)..\" \")\
    end\
    redraw()\
\
    menu.set = function(val)\
      if type(val) == \"number\" and menu.values[val] then\
        menu.selected = menu.values[val]\
      elseif type(val) == \"string\" then\
        menu.selected = val\
      end\
      redraw()\
    end\
\
    menu.open = function()\
      menu.opened = true\
      redraw()\
      local xPos, yPos = obj.body.getPosition()\
      local xPos2, yPos2 = obj.background.getPosition()\
      local yp, xp = menu.y + yPos + yPos2 - 2, menu.x + xPos + xPos2 - 2\
      local inv\
      if #menu.values+2 + yp > ySize then\
        yp = yp - (#menu.values+2)\
        inv = true\
      else\
        yp = yp + 1\
      end\
      local answer = contexts.main(xp ,yp ,{color = backColor2, lenth = size, align = \"left\", verticalInverted = inv}, unpack(menu.values))\
      obj.redraw()\
      if answer then\
        menu.selected = answer\
      end\
      menu.opened = false\
      redraw()\
      return answer\
    end\
\
    menu.check = function(nx,ny)\
      local xPos, yPos = obj.body.getPosition()\
      local xPos2, yPos2 = obj.background.getPosition()\
      if obj.active and nx >= menu.x+xPos+xPos2-2 and nx <= menu.x+size+xPos+xPos2-3 and ny-yPos-yPos2+2 == menu.y then\
        return true\
      end\
    end\
\
    return menu\
  end\
\
  obj.newSwitch = function(x,y,color,state)\
    if not color then\
      color = headerColor\
    end\
    if not state then\
      state = false\
    end\
    local switch = {}\
    local bColor = colors.gray\
    local offColor = colors.lightGray\
    if backgroundColor == bColor then\
      bColor = colors.lightGray\
      offColor = colors.white\
    end\
\
    local size = 6\
\
    switch.x = x\
    switch.y = y\
    switch.body = window.create(obj.body,x,y,size,1)\
    switch.body.setBackgroundColor(bColor)\
    switch.body.clear()\
    switch.state = state\
\
    switch.getState = function()\
      return switch.state\
    end\
\
    switch.toggle = function()\
      switch.body.setBackgroundColor(bColor)\
      switch.body.clear()\
      if switch.state then\
        switch.state = false\
        switch.body.setCursorPos(1,1)\
        switch.body.setBackgroundColor(offColor)\
      else\
        switch.state = true\
        switch.body.setCursorPos(math.floor(size/2)+1,1)\
        switch.body.setBackgroundColor(color)\
      end\
      switch.body.write(\"   \")\
    end\
\
    switch.toggle()\
    switch.toggle()\
\
    switch.check = function(nx,ny)\
      local xPos, yPos = obj.body.getPosition()\
      local xPos2, yPos2 = obj.background.getPosition()\
      if obj.active and nx >= switch.x+xPos+xPos2-2 and nx <= switch.x+size+xPos+xPos2-3 and ny-yPos-yPos2+2 == switch.y then\
        switch.toggle()\
        return true\
      end\
    end\
\
    return switch\
  end\
\
  obj.newRange = function(x,y,size,default,color)\
    local range = {}\
    range.body = window.create(obj.body,x,y,size,1)\
    range.body.setBackgroundColor(backgroundColor)\
    range.body.clear()\
    range.x = x\
    range.y = y\
\
    if not default then\
      default = 50\
    end\
\
    range.percent = default\
    local pos = math.floor(size*range.percent/100)+1\
    if pos > size then\
      pos = size\
    end\
\
    if not color then\
      color = headerColor\
    end\
\
    local function redraw()\
      range.body.setTextColor(color)\
\
      for i=1,pos do\
        range.body.setCursorPos(i,1)\
        range.body.write(string.char(140))\
      end\
\
      -- range.body.setBackgroundColor(color)\
      range.body.setCursorPos(pos,1)\
      range.body.write(string.char(8))\
      -- range.body.setBackgroundColor(backgroundColor)\
\
      range.body.setTextColor(colors.lightGray)\
      for i=pos+1,size do\
        range.body.setCursorPos(i,1)\
        range.body.write(string.char(140))\
      end\
    end\
\
    redraw()\
\
    range.set = function(per)\
      range.percent = per\
      pos = math.floor(size*range.percent/100)+1\
      if pos > size then\
        pos = size\
      end\
      redraw()\
    end\
\
    range.check = function(nx,ny)\
      local xPos, yPos = obj.body.getPosition()\
      local xPos2, yPos2 = obj.background.getPosition()\
      if obj.active and nx >= range.x+xPos+xPos2-2 and nx <= range.x+size+xPos+xPos2-3 and ny-yPos-yPos2+2 == range.y then\
        range.percent = (nx-xPos+1-range.x)/size*100\
        if range.percent < 50 then\
          range.percent = math.ceil((nx-xPos+1-range.x)/size*100)\
        elseif range.percent > 50 then\
          range.percent = math.floor((nx-xPos+2-range.x)/size*100)\
        end\
        pos = math.floor(size*range.percent/100)+1\
\
        if pos > size then\
          pos = size\
        end\
        redraw()\
        return true\
      end\
    end\
\
    return range\
  end\
\
  obj.newRadioSet = function(x,y, texts, default, size, txColor)\
    if not default then\
      default = 1\
    end\
\
    local radio = {}\
    radio.selectedNum = default\
    radio.x = x\
    radio.y = y\
    radio.selected = texts[default]\
\
    if not size then\
      size = 0\
      for i=1,#texts do\
        if #texts[i] > size then\
          size = #texts[i]\
        end\
      end\
      size = size+2\
    end\
\
    radio.body = window.create(obj.body,x,y,size,#texts*2-1)\
    radio.body.setBackgroundColor(backgroundColor)\
    radio.body.clear()\
\
    local function redraw()\
      for i=1,#texts do\
        radio.body.setTextColor(txColor or textColor)\
        radio.body.setCursorPos(1,i*2-1)\
        radio.body.write(texts[i])\
        radio.body.setCursorPos(size,i*2-1)\
        radio.body.setTextColor(textColor)\
        radio.body.write(string.char(186))\
      end\
      radio.body.setTextColor(headerColor)\
      radio.body.setCursorPos(size,radio.selectedNum*2-1)\
      radio.body.write(string.char(7))\
    end\
\
    redraw()\
\
    radio.check = function(nx,ny)\
      local xPos, yPos = obj.body.getPosition()\
      local xPos2, yPos2 = obj.background.getPosition()\
      if obj.active and nx >= radio.x+xPos+xPos2-2 and nx <= radio.x+size+xPos+xPos2-3 and ny-yPos-yPos2+2 >= radio.y and ny-yPos-yPos2+2 <= radio.y+#texts*2-2 then\
        radio.selectedNum = math.floor((ny-yPos-yPos2+2-radio.y+1)/2)+1\
        radio.selected = texts[radio.selectedNum]\
        redraw()\
        return true\
      end\
    end\
\
    radio.set = function(num)\
      local num = num or default\
      if type(num) == \"string\" then\
        for i=1, #texts do\
          if texts[i] == num then\
            radio.selectedNum = i\
            radio.selected = texts[i]\
            break\
          end\
        end\
      elseif type(num) == \"number\" then\
        radio.selectedNum = num\
        radio.selected = texts[num]\
      end\
      redraw()\
    end\
\
    return  radio\
  end\
\
  obj.newProgressBar = function(x,y,size,default,color, waiting)\
    if not default then\
      default = 0\
    end\
    local bar = {}\
    bar.waiting = waiting\
    bar.percent = default\
    bar.body = window.create(obj.body,x,y,size,1)\
    bar.x = x\
    bar.y = y\
\
    local pos = math.floor(size*bar.percent/100)\
    if pos > size then\
      pos = size\
    end\
\
    if not color then\
      color = headerColor\
    end\
\
    bar.body.setBackgroundColor(backgroundColor)\
    bar.body.clear()\
    local function redraw()\
      bar.body.setTextColor(color)\
\
      for i=1,pos do\
        bar.body.setCursorPos(i,1)\
        bar.body.write(string.char(140))\
      end\
\
      bar.body.setTextColor(colors.lightGray)\
\
      if bar.waiting then\
        for i=1,pos-math.floor(size/2.5) do\
          bar.body.setCursorPos(i,1)\
          bar.body.write(string.char(140))\
        end\
      end\
\
      for i=pos+1,size do\
        bar.body.setCursorPos(i,1)\
        bar.body.write(string.char(140))\
      end\
    end\
\
    redraw()\
\
    bar.setPercent = function(n)\
      if n >= 0 and ((n <= 100) or (n <= 142 and bar.waiting)) then\
        bar.percent = n\
        pos = math.floor(size*bar.percent/100)\
        redraw()\
      end\
    end\
\
    return bar\
  end\
\
  obj.newInput = function(x,y,size,default,description, align,char, slim)\
    local input = {}\
    local align = align or \"left\"\
    local size = size or 12\
    local sizeY = (not slim and 3) or 1\
    input.body = window.create(obj.body,x,y,size,sizeY)\
    input.x = x\
    input.y = y\
\
    --[[if backgroundColor == colors.lightGray then\
      input.body.setBackgroundColor(colors.white)\
    else\
      input.body.setBackgroundColor(backgroundColor)\
    end]]\
    input.body.setBackgroundColor(textColor)\
    input.body.setTextColor(backgroundColor)\
\
    local default = tostring(default) or \"\"\
    local description = description\
    input.text = default\
\
    local function redraw()\
      input.body.clear()\
      if align == \"left\" then\
        input.body.setCursorPos(2,math.floor((sizeY+1)/2))\
      elseif align == \"center\" then\
        input.body.setCursorPos(math.floor(size/2) - math.floor(#tostring(input.text)/2)+1,math.floor((sizeY+1)/2))\
      elseif align == \"right\" then\
        input.body.setCursorPos(math.floor(size - #tostring(input.text)),math.floor((sizeY+1)/2))\
      end\
      if char and input.text ~= default then\
        for i=1,#input.text do\
          input.body.write(char)\
        end\
      elseif input.text ~= \"\" then\
        input.body.write(input.text)\
      else\
        -- input.body.setTextColor(colors.gray)\
        input.body.write(description)\
        -- input.body.setTextColor(backgroundColor)\
      end\
      if #input.text > size-1 then\
        input.body.setCursorPos(size-2,math.floor((sizeY+1)/2))\
        input.body.write(\".. \")\
      end\
    end\
\
    redraw()\
\
    input.set = function(txt)\
      input.text = tostring(txt) or \"\"\
      redraw()\
    end\
\
    input.check = function(nx,ny)\
      local xPos, yPos = obj.body.getPosition()\
      local xPos2, yPos2 = obj.background.getPosition()\
      if obj.active and nx >= input.x+xPos+xPos2-2 and nx <= input.x+size+xPos+xPos2-3 and ny-yPos-yPos2+2 >= input.y and ny-yPos-yPos2+2 <= input.y+sizeY-1 then\
        input.body.setCursorPos(input.x+1,math.floor((sizeY+1)/2))\
        input.body.clear()\
        input.body.setBackgroundColor(textColor)\
        input.body.setTextColor(backgroundColor)\
        local bt = term.redirect(input.body)\
        input.text = startInput(input.body, 2, math.floor((sizeY+1)/2), size-2, input.text, char) --read(char)\
        term.redirect(bt)\
        redraw()\
        return true\
      end\
    end\
\
    return input\
  end\
\
  -- obj.header.setTextColor(headerTextColor)\
  -- obj.header.setBackgroundColor(headerColor)\
  -- obj.header.clear()\
  -- obj.header.write(\" \"..header)\
  obj.setHeader(header)\
\
  obj.body.setTextColor(textColor)\
  obj.body.setBackgroundColor(backgroundColor)\
  obj.body.clear()\
\
  if backgroundColor == colors.lightGray then\
    obj.scroller.setBackgroundColor(colors.white)\
  else\
    obj.scroller.setBackgroundColor(colors.lightGray)\
  end\
  obj.scroller.clear()\
\
  obj.scrollerB.setBackgroundColor(backgroundColor)\
  obj.scrollerB.clear()\
\
  table.insert(screens, obj)\
  return obj\
end\
\
\
-------------------------------------------------------------------\
---------------------------DIALOGS--------------------------------\
\
local function createDialog(header, text, size)\
  local dialog = newScreen(colors.gray, colors.white, colors.white, colors.gray, \"\", true, -1, -1, 2, 0, 0)\
  dialog.opened = false\
  dialog.active = false\
  dialog.header.setVisible(false)\
  dialog.header.reposition(-1,-1,0,0)\
\
  if not text then text = \" \" end\
  if not header then header = \" \" end\
  if not size then size = 0  end\
\
  local sizeX = 28\
  local posX = math.floor(xSize/2)-math.floor(sizeX/2)+1\
\
  local linesNum = printText(dialog.header, text, 2, 4, sizeX-2, \"center\", colors.gray)\
  if linesNum < 1 then\
    linesNum = 1\
  end\
  local sizeY = 5+linesNum+size\
  dialog.background.reposition(posX, -sizeY, sizeX, sizeY)\
  dialog.body.reposition(1, 1, sizeX, sizeY)\
\
  os.drawImage(\"#SysRes/Images/dialog_top.png\",1,1, dialog.body)\
  dialog.body.setCursorPos(math.floor(sizeX/2)-math.floor(#header/2), 2)\
  dialog.body.setTextColor(colors.white)\
  dialog.body.write(header)\
  for i=1,sizeY-1 do\
    os.drawImage(\"#SysRes/Images/dialog_middle.png\",1,3+i, dialog.body)\
  end\
  os.drawImage(\"#SysRes/Images/dialog_bottom.png\",1,sizeY-1, dialog.body)\
\
\
  dialog.body.setBackgroundColor(colors.white)\
  printText(dialog.body, text, 2, 4, sizeX-2, \"center\", colors.gray)\
\
  dialog.pos = posX\
  dialog.sizeX = sizeX\
  dialog.sizeY = sizeY\
\
  return dialog\
end\
\
local function showDialog(diag)\
  diag.opened = true\
  diag.active = true\
  for i=1,math.floor(diag.sizeY/2) do\
    diag.background.reposition(diag.pos, -diag.sizeY+i*2+1)\
    sleep(0)\
  end\
  diag.background.reposition(diag.pos, 1)\
end\
\
local function closeDialog(diag)\
  diag.opened = false\
  diag.active = false\
  for i=1,math.floor(diag.sizeY/2)+1 do\
    term.current().redraw()\
    for i,scr in ipairs(screens) do\
      if scr.active then\
        scr.redraw()\
      end\
    end\
    diag.background.reposition(diag.pos, -i*2-1)\
    -- sleep(0)\
  end\
end\
\
local function animate(trm, x,y, txt)\
  trm.setCursorPos(x,y)\
  trm.setTextColor(colors.white)\
  trm.setBackgroundColor(colors.gray)\
  trm.write(\" \"..txt..\" \")\
  sleep(0.1)\
  trm.setCursorPos(x,y)\
  trm.setTextColor(colors.gray)\
  trm.setBackgroundColor(colors.white)\
  trm.write(\" \"..txt..\" \")\
end\
\
\
\
function alert(header, text)\
  local dialog = createDialog(header, text)\
\
  local okbtn = dialog.newButton(dialog.sizeX-5,dialog.sizeY,4,1, colors.gray,colors.white, \"ok\")\
\
  dialog.close = function()\
    if dialog.opened then\
      closeDialog(dialog)\
    end\
  end\
\
  dialog.show = function()\
    if not dialog.opened then\
      showDialog(dialog)\
      while true do\
        local event, side, x, y = os.pullEvent()\
        if event == \"mouse_click\" then\
          if okbtn.check(x,y) then\
            dialog.close()\
            break\
          end\
        end\
      end\
    end\
  end\
\
  return dialog\
end\
\
function select(header, text, btn1, btn2, cancel)\
  local dialog = createDialog(header, text)\
\
  local btn_1 = dialog.newButton(dialog.sizeX-#tostring(btn1)-#tostring(btn2)-6,dialog.sizeY,#tostring(btn1)+2,1, colors.gray,colors.white, btn1)\
  local btn_2 = dialog.newButton(dialog.sizeX-#tostring(btn2)-3,dialog.sizeY,#tostring(btn2)+2,1, colors.gray,colors.white, btn2)\
  if cancel then\
    btn_cancel = dialog.newButton(3,dialog.sizeY,3,1, colors.gray,colors.white, \"x\")\
  end\
\
  dialog.close = function()\
    if dialog.opened then\
      closeDialog(dialog)\
    end\
  end\
\
  dialog.show = function()\
    if not dialog.opened then\
      showDialog(dialog)\
      while true do\
        local event, side, x, y = os.pullEvent()\
        if event == \"mouse_click\" then\
          if btn_1.check(x,y) then\
            dialog.close()\
            return btn1\
          elseif btn_2.check(x,y) then\
            dialog.close()\
            return btn2\
          elseif btn_cancel.check(x,y) then\
            dialog.close()\
            break\
          end\
        end\
      end\
    end\
  end\
\
  return dialog\
end\
\
function inputDialog(header, text, btn1, btn2, cancel, ...)\
  local fields = {...}\
  local inputs = {}\
  local dialog = createDialog(header, text, #fields*2)\
\
  local btn_1 = dialog.newButton(dialog.sizeX-#tostring(btn1)-#tostring(btn2)-6,dialog.sizeY,#tostring(btn1)+2,1, colors.gray,colors.white, btn1)\
  local btn_2 = dialog.newButton(dialog.sizeX-#tostring(btn2)-3,dialog.sizeY,#tostring(btn2)+2,1, colors.gray,colors.white, btn2)\
  if cancel then\
    btn_cancel = dialog.newButton(3,dialog.sizeY,3,1, colors.gray,colors.white, \"x\")\
  end\
\
  for i,field in ipairs(fields) do\
    table.insert(inputs, dialog.newInput(3,dialog.sizeY-#fields*2+i*2-2,dialog.sizeX-4,\"\",field,nil,nil,true))\
  end\
\
  dialog.close = function()\
    if dialog.opened then\
      closeDialog(dialog)\
    end\
  end\
\
  dialog.getInputData = function()\
    local out = {}\
    for i,inp in ipairs(inputs) do\
      out[fields[i]] = inp.text\
    end\
\
    return out\
  end\
\
  dialog.show = function()\
    if not dialog.opened then\
      showDialog(dialog)\
      while true do\
        local event, side, x, y = os.pullEvent()\
        if event == \"mouse_click\" then\
          if btn_1.check(x,y) then\
            dialog.close()\
            return btn1, dialog.getInputData()\
          elseif btn_2.check(x,y) then\
            dialog.close()\
            return btn2, dialog.getInputData()\
          elseif btn_cancel.check(x,y) then\
            dialog.close()\
            break\
          else\
            for i,inp in ipairs(inputs) do\
              if inp.check(x,y) then\
                break\
              end\
            end\
          end\
        end\
      end\
    end\
  end\
\
  return dialog\
end\
\
function getName()\
  return name\
end\
\
function getVersion()\
  return version\
end",
    path = "System/APIs/screenworks",
  },
  {
    text = " 90 90 90 90 90 90\
 90\14700\14090\14090\14700 90\
 90 90O90S90 90 90\
 90 90 90 90 90 90",
    path = "System/Apps/Launcher/App.ico",
  },
  {
    text = "{\
  name = \"Simple Launcher\",\
  version = \"0.2\",\
  developer = \"DECE\",\
  hidden = true,\
}",
    path = "System/Apps/Launcher/App.info",
  },
  {
    text = "os.printLog(\"Running\")\
\
local xSize, ySize = term.getSize()\
local selector = 1\
\
local clear = function(color)\
\009term.setBackgroundColor(color)\
\009term.clear()\
\009term.setCursorPos(1,1)\
end\
\
local text = function(string,xPos,yPos)\
\009term.setCursorPos(xPos,yPos)\
\009term.write(string)\
end\
\
local about = fs.open(shell.resolve(\"App.info\"), \"r\")\
about = textutils.unserialize(about.readAll())\
\
local apps = os.getAppsList()\
local appsInfo = {}\
for i,app in ipairs(apps) do\
\009appsInfo[i] = os.getAppInfo(app)\
end\
\
local function redraw()\
  clear(colors.white)\
\
  for i=1,#apps do\
\009\009if i == selector then\
\009\009\009term.setTextColor(colors.cyan)\
\009\009else\
\009\009\009term.setTextColor(colors.lightGray)\
\009\009end\
\009\009-- appInfo = os.getAppInfo(apps[i])\
\009\009if appsInfo[i] and appsInfo[i].name then\
    \009text(i..' '..appsInfo[i].name,2,i+1)\
\009\009else\
\009\009\009text(i..' '..apps[i],2,i+1)\
\009\009end\
  end\
\
\009term.setTextColor(colors.lightGray)\
  text(about.name..\" v\"..about.version,2,ySize)\
end\
\
redraw()\
\
while true do\
\009local event, side, x, y = os.pullEvent()\
\
\009if event == \"char\" then\
\009\009if side >= '1' and side <= '9' then\
\009\009\009os.runApp(apps[tonumber(side)])\
\009\009elseif side == \"r\" then\
\009\009\009apps = os.getAppsList()\
\009\009\009appsInfo = {}\
\009\009\009for i,app in ipairs(apps) do\
\009\009\009\009appsInfo[i] = os.getAppInfo(app)\
\009\009\009end\
\009\009\009redraw()\
\009\009end\
\009elseif event == \"key\" then\
\009\009if side == keys.up and selector > 1 then\
\009\009\009selector = selector - 1\
\009\009\009redraw()\
\009\009elseif side == keys.down and selector < #apps then\
\009\009\009selector = selector + 1\
\009\009\009redraw()\
\009\009elseif side == keys.enter then\
\009\009\009os.runApp(apps[tonumber(selector)])\
\009\009end\
\009elseif event == \"mouse_click\" then\
\009\009os.runApp(apps[tonumber(selector)])\
\009elseif event == \"mouse_scroll\" then\
\009\009if side == -1 and selector > 1 then\
\009\009\009selector = selector - 1\
\009\009\009redraw()\
\009\009elseif side == 1 and selector < #apps then\
\009\009\009selector = selector + 1\
\009\009\009redraw()\
\009\009end\
\009end\
\
  --redraw()\
end",
    path = "System/Apps/Launcher/Start.x",
  },
  {
    text = " 90 90 90 90 90 90\
 90\14700\14090\14090\14700 90\
 90 90O90S90 90 90\
 90 90 90 90 90 90",
    path = "System/Apps/LegacyUI/App.ico",
  },
  {
    text = "{\
  name = \"Legacy UI\",\
  version = \"0.1\",\
  developer = \"DECE\",\
  hidden = true,\
}",
    path = "System/Apps/LegacyUI/App.info",
  },
  {
    text = "os.newBackgroundTask(\"/System/Scripts/update_checker.lua\", \"OTA updates service\")\
\
local xSize, ySize = term.getSize()\
local centerX = math.floor(xSize/2)\
local centerY = math.floor(ySize/2)\
\
local showApps = false\
local showNoti = false\
\
local show_float_noti = false\
local float_timer = 0\
local float_timer_limit = os.getFloatingTime()/os.getSystemDelay()\
\
local notifications = {}\
\
local first = term.current()\
local origin = window.create(term.native(),1,1,xSize,ySize)\
local currentTask\
\
local recApps = window.create(origin,centerX-14,1,30,ySize-1)\
local recApps_scroll = window.create(recApps,3,1,26,5)\
recApps_scroll.setBackgroundColor(colors.black)\
recApps_scroll.clear()\
recApps.setVisible(false)\
\
local btn_animation = window.create(term.native(),-1,-1,1,1)\
btn_animation.setTextColor(colors.lightGray)\
\
local noti_screen = window.create(term.native(),xSize+1,1,20,ySize)\
local noti_screen_background = window.create(noti_screen,1,1,20,ySize-3)\
local noti_screen_scroll = window.create(noti_screen_background,1,1,20,ySize-3)\
\
local float_noti_window = window.create(term.native(),xSize+1,ySize-6,20,5)\
float_noti_window.setVisible(false)\
\
local errorBuffer\
local tasks = os.getRunningTasks()\
coroutine.yield(1, 1, xSize, ySize-1)\
\
\
\
local clear = function(color)\
\009term.setBackgroundColor(color)\
\009term.clear()\
\009term.setCursorPos(1,1)\
end\
\
local text = function(string,xPos,yPos,trm)\
\009if not trm then\
\009\009trm = term\
\009end\
\009trm.setCursorPos(xPos,yPos)\
\009trm.write(string)\
end\
\
\
local function redrawNotifications()\
  local pos\
  noti_screen_scroll.reposition(1,1, 20, ySize-3)\
  noti_screen_scroll.clear()\
\009local sizeX, sizeY = noti_screen_scroll.getSize()\
\009local posX, posY = noti_screen_scroll.getPosition()\
\009notifications = os.getNotifications()\
\
  for i, noti in ipairs(notifications) do\
    if noti then\
      pos = i*5-4\
\
      if pos + 4 > sizeY then\
        noti_screen_scroll.reposition(posX, posY, sizeX, pos+5)\
      end\
\
      noti_screen_scroll.setBackgroundColor(colors.lightGray)\
      noti_screen_scroll.setTextColor(colors.gray)\
      noti_screen_scroll.setCursorPos(1,pos)\
      noti_screen_scroll.write(\"                    \")\
      noti_screen_scroll.setCursorPos(1,pos)\
      noti_screen_scroll.write(\" \"..noti.icon..\" \"..noti.header)\
      noti_screen_scroll.setCursorPos(20,pos)\
      noti_screen_scroll.write(\"x\")\
\
      noti_screen_scroll.setBackgroundColor(colors.gray)\
      noti_screen_scroll.setTextColor(colors.lightGray)\
      noti_screen_scroll.setCursorPos(2,pos+2)\
      noti_screen_scroll.write(noti.text)\
      noti_screen_scroll.setCursorPos(2,pos+3)\
      noti_screen_scroll.write(noti.text2)\
    end\
  end\
  os.applyColorPalette(currentPalette)\
end\
\
local function removeNotification(num)\
\009notifications = os.getNotifications()\
  if notifications[num] then\
    os.printLog(\"Removing notification #\"..num, \"SystemUI\")\
    os.removeNotification(num)\
  end\
end\
\
local function clearNotifications()\
\009os.printLog(\"Clearing notifications\", \"SystemUI\")\
  os.clearNotifications()\
\009local posX, posY = noti_screen_scroll.getPosition()\
\009if #notifications > 0 then\
\009\009local sizeX, sizeY = noti_screen_scroll.getSize()\
\009\009for i=1, sizeX/3+1 do\
\009\009\009noti_screen_background.clear()\
\009\009\009noti_screen_scroll.reposition(i*3, posY)\
\009\009\009sleep(0)\
\009\009end\
\009end\
\009redrawNotifications()\
\009noti_screen_scroll.reposition(posX, posY)\
end\
\
term.redirect(noti_screen_background)\
clear(colors.gray)\
term.redirect(noti_screen_scroll)\
clear(colors.gray)\
term.redirect(noti_screen)\
clear(colors.gray)\
term.setTextColor(colors.lightGray)\
text(\"Clear\",2,ySize-1)\
\
\
local function drawBar()\
\009term.redirect(origin)\
\009local barText = --[[string.char(17)..\"  \"..string.char(7)..\"  \"..]]string.char(140)\
\009local clr = colors.black\
\009local tx_clr = colors.lightGray\
\
\009if tasks[currentTask] and not showApps then\
\009\009if tasks[currentTask].style then\
\009\009\009clr = tasks[currentTask].style\
\009\009\009if tasks[currentTask].style >= colors.orange and tasks[currentTask].style <= colors.red then\
\009\009\009\009tx_clr = colors.white\
\009\009\009end\
\009\009end\
\009end\
\
\009if showNoti then\
\009\009paintutils.drawLine(5,ySize,xSize-20,ySize,clr)\
\009\009paintutils.drawLine(xSize-19,ySize,xSize,ySize,colors.gray)\
\009else\
\009\009paintutils.drawLine(5,ySize,xSize-2,ySize,clr)\
\009end\
\
\009term.setTextColor(tx_clr)\
\009if not show_float_noti then\
\009\009text(string.char(7)..\" \",xSize-1,ySize)\
\009elseif not showNoti then\
\009\009text(string.char(19)..\" \",xSize-1,ySize)\
\009end\
\
\009term.setBackgroundColor(clr)\
\009text(\" \"..barText..\"  \",1,ySize)\
\009if currentTask > 1 then\
\009\009text(string.char(30),4,ySize)\
\009end\
\009time = textutils.formatTime(os.time(),true)\
\009text(time,centerX-#time/2+2,ySize)\
end\
\
local function animate(x1,y1,x2,y2, color, redrTerm)\
  btn_animation.reposition(x1,y1,x2,y2)\
\009os.applyColorPalette(currentPalette)\
  if color then\
    btn_animation.setBackgroundColor(color)\
  else\
    btn_animation.setBackgroundColor(colors.gray)\
  end\
  btn_animation.clear()\
  sleep(0.1)\
  btn_animation.reposition(-1,-1)\
\009os.applyColorPalette(currentPalette)\
\009local redrTerm = redrTerm or origin\
  redrTerm.redraw()\
\009if not showApps and not showNoti and tasks[currentTask] then\
\009\009tasks[currentTask].screen.redraw()\
\009\009os.applyColorPalette(currentPalette)\
\009end\
end\
\
local function openNoti()\
\009setDidState(true)\
\009if show_float_noti then\
\009\009show_float_noti = false\
\009\009float_timer = 0\
\009\009float_noti_window.reposition(xSize+1,ySize-6)\
\009\009float_noti_window.setVisible(false)\
\009end\
\009for i=1,5 do\
\009\009noti_screen.reposition(xSize-i*4+1,1)\
\009\009os.applyColorPalette(currentPalette)\
\009\009sleep(0)\
\009end\
\009showNoti = true\
end\
\
local function closeNoti()\
\009showNoti = false\
\009drawBar()\
\009for i=1,7 do\
\009\009origin.redraw()\
\009\009if not showApps and tasks[currentTask] then\
\009\009\009tasks[currentTask].screen.redraw()\
\009\009end\
\009\009noti_screen.reposition(xSize-19+i*3,1)\
\009\009os.applyColorPalette(currentPalette)\
\009\009sleep(0)\
\009end\
\009setDidState(false)\
end\
\
local function redrawTasks()\
\009tasks = os.getRunningTasks()\
\009currentTask = os.getCurrentTask()\
\
\009local pos\
\009local sizeX, sizeY = recApps_scroll.getSize()\
\009local posX, posY = recApps_scroll.getPosition()\
\
\009recApps_scroll.setBackgroundColor(colors.black)\
\009recApps_scroll.clear()\
\
\009recApps_scroll.reposition(posX,1,sizeX,#tasks*5)\
\
\009for i=1,#tasks do\
\009\009-- tasks[i] = tasks[i+1]\
\
\009\009pos = i*5-3\
\009\009term.redirect(recApps_scroll)\
\
\009\009paintutils.drawFilledBox(1,pos,26,pos+3,colors.white)\
\009\009recApps_scroll.setTextColor(colors.lightGray)\
\009\009text(tasks[i].name,8,pos+1,recApps_scroll)\
\
\009\009if i > 1 then\
\009\009\009paintutils.drawFilledBox(24,pos,26,pos+3,colors.red)\
\009\009\009recApps_scroll.setTextColor(colors.white)\
\009\009\009text(\"x\",25,pos+1,recApps_scroll)\
\009\009end\
\
\009\009os.drawImage(os.getAppIcon(tasks[i].path),1,pos,recApps_scroll,6,4)\
\
\009\009-- recApps_scroll.reposition(posX,1,sizeX,sizeY-5)\
\009end\
end\
\
local function openShowApps()\
\009setDidState(true)\
\009redrawTasks()\
\009os.applyColorPalette(currentPalette)\
\009os.printLog(\"Trying to open Recent apps\", \"SystemUI\")\
\
\009tasks = os.getRunningTasks()\
\009currentTask = os.getCurrentTask()\
\
\009for i=1,#tasks do\
\009\009tasks[i].screen.setVisible(false)\
\009end\
\
\009recApps.setVisible(true)\
\009tasks[currentTask].screen.setVisible(true)\
\009drawBar()\
\
\009for i=1,math.floor(ySize/3) do\
\009\009recApps.redraw()\
\009\009tasks[currentTask].screen.reposition(1,ySize-(ySize-i*3+1))\
\009\009drawBar()\
\009\009sleep(0)\
\009end\
\009tasks[currentTask].screen.reposition(1,ySize+1)\
\009showApps = true\
\009recApps.redraw()\
\009drawBar()\
\009os.applyColorPalette(currentPalette)\
end\
\
local function changeApp(name)\
  tasks = os.getRunningTasks()\
  currentTask = os.getCurrentTask()\
\
\009if tasks[name] then\
\009\009recApps.setVisible(false)\
\009\009drawBar()\
\009\009tasks[name].screen.reposition(1,ySize+1)\
\009\009tasks[name].screen.setVisible(true)\
\
\009\009for i=1,math.floor(ySize/4) do\
\009\009\009tasks[name].screen.reposition(1,ySize-i*4+1)\
\009\009\009drawBar()\
\009\009\009sleep(0)\
\009\009end\
\
\009\009tasks[name].screen.reposition(1,1)\
\009\009drawBar()\
\009\009showApps = false\
\009\009showNoti = false\
\009end\
\009setDidState(false)\
\009drawBar()\
end\
\
local function closeApp(name)\
\009redrawTasks()\
\
\009if not showApps or #tasks == 1 then\
\009\009showApps = false\
\009\009os.changeApp(1)\
\009\009os.printLog(\"Open Launcher\", \"SystemUI\")\
\009end\
end\
\
local function runApp(info, args)\
\009redrawTasks()\
\
\009local error\
\009local path = info.path\
\009local findApp = info.access\
\009local name = info.name\
\
\009if findApp ~= nil then\
\009\009term.redirect(origin)\
\009\009if tasks[currentTask].coroutine and not error then\
\009\009\009local pos = #tasks*5-3\
\009\009\009local sizeX, sizeY = recApps_scroll.getSize()\
\009\009\009local posX, posY = recApps_scroll.getPosition()\
\
\009\009\009if pos + 4 > sizeY then\
\009\009\009\009if (pos+4) >= ySize-1 then\
\009\009\009\009\009recApps_scroll.reposition(posX,posY+(ySize-(pos+4)-1),sizeX,pos+4)\
\009\009\009\009else\
\009\009\009\009\009recApps_scroll.reposition(posX,1,sizeX,pos+4)\
\009\009\009\009end\
\009\009\009end\
\009\009\009term.redirect(recApps_scroll)\
\
\009\009\009paintutils.drawFilledBox(1,pos,26,pos+3,colors.white)\
\009\009\009recApps_scroll.setTextColor(colors.lightGray)\
\009\009\009text(tasks[currentTask].name,8,pos+1,recApps_scroll)\
\
\009\009\009if currentTask > 1 then\
\009\009\009\009paintutils.drawFilledBox(24,pos,26,pos+3,colors.red)\
\009\009\009\009recApps_scroll.setTextColor(colors.white)\
\009\009\009\009text(\"x\",25,pos+1,recApps_scroll)\
\009\009\009end\
\
\009\009\009os.drawImage(os.getAppIcon(tasks[currentTask].path),1,pos,recApps_scroll,6,4)\
\009\009\009recApps_scroll.setBackgroundColor(colors.black)\
\009\009\009drawBar()\
\009\009end\
\009end\
end\
\
local function input()\
\009os.printLog(\"Started\", \"SystemUI\")\
  while true do\
    local event, side, x, y, z = os.pullEvent()\
    tasks = os.getRunningTasks()\
    currentTask = os.getCurrentTask()\
\
\009\009if show_float_noti and os.getFloatingEnabled() then\
\009\009\009float_noti_window.redraw()\
\009\009\009if float_timer > float_timer_limit then\
\009\009\009\009show_float_noti = false\
\009\009\009\009float_timer = 0\
\009\009\009\009local xp, yp = float_noti_window.getPosition()\
\009\009\009\009for i=1,3 do\
\009\009\009\009\009if showApps then\
\009\009\009\009\009\009first.redraw()\
\009\009\009\009\009\009recApps.redraw()\
\009\009\009\009\009else\
\009\009\009\009\009\009tasks[currentTask].screen.redraw()\
\009\009\009\009\009end\
\009\009\009\009\009float_noti_window.reposition(xp, ySize-6+i*2+1)\
\009\009\009\009\009sleep(0)\
\009\009\009\009end\
\009\009\009\009float_noti_window.setVisible(false)\
\009\009\009else\
\009\009\009\009float_timer = float_timer + 1\
\009\009\009end\
\009\009elseif show_float_noti then\
\009\009\009if float_timer > float_timer_limit then\
\009\009\009\009show_float_noti = false\
\009\009\009\009float_timer = 0\
\009\009\009else\
\009\009\009\009float_timer = float_timer + 1\
\009\009\009end\
\009\009end\
\009\009drawBar()\
\
\009\009errorBuffer = os.getErrorBuffer()\
\009\009if errorBuffer then\
\009\009\009local errMsg = screenworks.alert(\"Error in \"..errorBuffer.app, errorBuffer.error)\
\009\009\009errMsg.show()\
\009\009\009if errorBuffer.app == \"System UI\" then\
\009\009\009\009os.reboot()\
\009\009\009end\
\009\009\009errorBuffer = nil\
\009\009\009os.clearErrorBuffer()\
\009\009end\
\
\009\009if event == \"system.closeApp\" then\
\009\009\009closeApp(side)\
\009\009elseif event == \"system.runApp\" then\
\009\009\009runApp(side, x)\
\009\009elseif event == \"system.changeApp\" then\
\009\009\009changeApp(side)\
\009\009elseif event == \"system.sendNotification\" or event == \"system.removeNotification\" or event == \"system.clearNotifications\" then\
\009\009\009redrawNotifications()\
\009\009\009float_timer_limit = os.getFloatingTime()/os.getSystemDelay()\
\009\009\009show_float_noti = true\
\009\009\009float_timer = 0\
\009\009\009drawBar()\
\009\009\009if event == \"system.sendNotification\" and not showNoti and os.getFloatingEnabled() then\
\009\009\009\009float_noti_window.setBackgroundColor(colors.gray)\
\009\009\009\009float_noti_window.clear()\
\
\009\009\009\009float_noti_window.setTextColor(colors.lightGray)\
\009\009\009\009float_noti_window.setCursorPos(2,3)\
\009\009\009\009float_noti_window.write(side.text)\
\009\009\009\009float_noti_window.setCursorPos(2,4)\
\009\009\009\009float_noti_window.write(side.text2)\
\
\009\009\009\009float_noti_window.setBackgroundColor(colors.lightGray)\
\009      float_noti_window.setTextColor(colors.gray)\
\009      float_noti_window.setCursorPos(1,1)\
\009      float_noti_window.write(\"                    \")\
\009      float_noti_window.setCursorPos(1,1)\
\009      float_noti_window.write(\" \"..side.icon..\" \"..side.header)\
\
\009\009\009\009float_noti_window.setVisible(true)\
\009\009\009\009for i=1,5 do\
\009\009\009\009\009float_noti_window.reposition(xSize-i*4+1,ySize-6)\
\009\009\009\009\009sleep(0)\
\009\009\009\009end\
\009\009\009end\
\009\009elseif event == \"mouse_click\" then\
      if y == ySize then\
\009\009\009\009coroutine.yield(true)\
        if x >= xSize-1 and x <= xSize then\
          animate(xSize-2,ySize,3,1)\
          if showNoti then\
            closeNoti()\
          else\
            openNoti()\
          end\
        elseif x >= 1 and x <= 2 then\
          animate(1,ySize,3,1)\
\009\009\009\009\009if showNoti then\
\009\009\009\009\009\009closeNoti()\
\009\009\009\009\009end\
          if tasks[currentTask] and not showApps then\
            openShowApps()\
\009\009\009\009\009elseif showApps then\
\009\009\009\009\009\009os.changeApp(currentTask)\
          end\
\009\009\009\009elseif currentTask > 1 and x >= 4 and x <= 5 then\
\009\009\009\009\009animate(3,ySize,3,1)\
\009\009\009\009\009if showNoti then\
\009\009\009\009\009\009closeNoti()\
\009\009\009\009\009end\
\009\009\009\009\009os.changeApp(1)\
        end\
\009\009\009elseif showNoti then\
\009\009\009\009if x >= xSize - 19 and y < ySize then\
\009\009\009\009\009local posX, posY = noti_screen_scroll.getPosition()\
\009\009\009\009\009local notiNum = math.floor((y-posY+5)/5)\
\
\009\009\009\009\009if x == xSize and (y-posY+5)%5 == 0 then\
\009\009\009\009\009\009removeNotification(notiNum)\
\009\009\009\009\009elseif x >= xSize-19 and x <= xSize-13 and y == ySize-1 then\
\009\009\009\009\009\009animate(xSize-19,ySize-1,7,1, colors.lightGray, noti_screen)\
\009\009\009\009\009\009clearNotifications()\
\009\009\009\009\009\009closeNoti()\
\009\009\009\009\009elseif notiNum and #notifications > 0 and notifications[notiNum] then\
\009\009\009\009\009\009os.runApp(notifications[notiNum].app)\
\009\009\009\009\009\009removeNotification(notiNum)\
\009\009\009\009\009\009closeNoti()\
\009\009\009\009\009end\
\009\009\009\009else\
\009\009\009\009\009closeNoti()\
\009\009\009\009end\
\009\009\009else\
\009\009\009\009if showApps and not showNoti then\
\009\009\009\009\009local posX, posY = recApps_scroll.getPosition()\
\009\009\009\009\009local app = math.floor((y-posY+4)/5)\
\
\009\009\009\009\009if x>=centerX-12 and x<=centerX+10 then\
\009\009\009\009\009\009if app > 0 and app <= #tasks then\
\009\009\009\009\009\009\009os.changeApp(app)\
\009\009\009\009\009\009end\
\009\009\009\009\009elseif x >= centerX+11 and x <= centerX+13 then\
\009\009\009\009\009\009if app > 1 and app <= #tasks then\
\009\009\009\009\009\009\009os.closeApp(app)\
\009\009\009\009\009\009end\
\009\009\009\009\009end\
\009\009\009\009end\
      end\
\009\009elseif event == \"mouse_drag\" and y == ySize and x < centerX-3 and not showNoti then\
\009\009\009coroutine.yield(true)\
\009\009\009animate(centerX-5,ySize,13,1)\
\009\009\009if currentTask < #tasks then\
\009\009\009\009os.changeApp(currentTask + 1)\
\009\009\009elseif currentTask ~= 1 then\
\009\009\009\009os.changeApp(1)\
\009\009\009end\
\009\009elseif event == \"mouse_drag\" and y == ySize and x > centerX+4 and not showNoti then\
\009\009\009coroutine.yield(true)\
\009\009\009animate(centerX-5,ySize,13,1)\
\009\009\009if currentTask > 1 then\
\009\009\009\009os.changeApp(currentTask - 1)\
\009\009\009elseif currentTask ~= #tasks then\
\009\009\009\009os.changeApp(#tasks)\
\009\009\009end\
\009\009elseif event == \"mouse_scroll\" and showNoti then\
\009\009\009local posX, posY = noti_screen_scroll.getPosition()\
\009\009\009local sx, sy = noti_screen_scroll.getSize()\
\009\009\009if side == 1 and posY > -(sy - ySize) then\
\009\009\009\009noti_screen_scroll.reposition(posX,posY-1)\
\009\009\009elseif side == -1 and posY < 1 then\
\009\009\009\009noti_screen_scroll.reposition(posX,posY+1)\
\009\009\009end\
\009\009\009os.applyColorPalette(currentPalette)\
\009\009elseif event == \"mouse_scroll\" and showApps then\
\009\009\009local posX, posY = recApps_scroll.getPosition()\
\009\009\009local sx, sy = recApps_scroll.getSize()\
\009\009\009if side == 1 and posY > -(sy - ySize) then\
\009\009\009\009recApps_scroll.reposition(posX,posY-1)\
\009\009\009elseif side == -1 and posY < 1 then\
\009\009\009\009recApps_scroll.reposition(posX,posY+1)\
\009\009\009end\
\009\009\009os.applyColorPalette(currentPalette)\
    end\
  end\
end\
\
input()",
    path = "System/Apps/LegacyUI/Start.x",
  },
  {
    text = " 90 90 90 90 90 90\
 90\14700\14090\14090\14700 90\
 90 90O90S90 90 90\
 90 90 90 90 90 90",
    path = "System/Apps/Logger/App.ico",
  },
  {
    text = "{\
  name = \"Logger\",\
  version = \"0.1\",\
  developer = \"DECE\",\
}",
    path = "System/Apps/Logger/App.info",
  },
  {
    text = "local xSize, ySize = term.getSize()\
os.loadAPI(\"#API/screenworks\")\
\
os.setBarColor(colors.black)\
\
local screen = screenworks.newScreen(colors.lightGray,colors.black, colors.cyan,colors.gray, \"Logger\")\
\
local num = 0\
\
local function events()\
\009while true do\
\009\009local event, side, x, y = os.pullEvent()\
\
\009\009if event == \"mouse_scroll\" then\
\009\009\009screen.scroll(-side)\
\009\009end\
\009end\
end\
\
local logging = function()\
\009local msg = \"\"\
\009local i = 1\
\009local pos = 2\
\
\009while true do\
\009\009local event = os.pullEvent()\
\009\009if os.getLastLogMessage() ~= msg then\
\009\009\009msg = os.getLastLogMessage()\
\
\009\009\009if pos > ySize-4 then\
\009\009\009\009screen.resize(pos+4)\
\009\009\009end\
\
\009\009\009term.redirect(screen.body)\
\009\009\009term.setCursorPos(2, pos)\
\009\009\009term.write(\"[\"..i..\"] \")\
\009\009\009print(msg)\
\
\009\009\009_, pos = term.getCursorPos()\
\009\009\009-- pos = pos+1\
\009\009\009i = i + 1\
\009\009end\
\009end\
end\
\
os.newBackgroundTask(logging, \"Log grubber\")\
events()\
-- wait()\
-- parallel.waitForAll(events, wait)",
    path = "System/Apps/Logger/Start.x",
  },
  {
    text = " 90 90 90 90 90 90\
 90\14700\14090\14090\14700 90\
 90 90O90S90 90 90\
 90 90 90 90 90 90",
    path = "System/Apps/NotificationsDemo/App.ico",
  },
  {
    text = "{\
  name = \"Notification Demo\",\
  version = \"1.0\",\
  developer = \"DECE\",\
}",
    path = "System/Apps/NotificationsDemo/App.info",
  },
  {
    text = "local xSize, ySize = term.getSize()\
os.loadAPI(\"#API/screenworks\")\
\
os.setBarColor(colors.white)\
\
local screen = screenworks.newScreen(colors.lightGray,colors.white, colors.white,colors.cyan, \"Notification Demo\")\
\
local textFieldHeader = screen.newInput(2, 2, xSize-3, \"\", \"Notification header\")\
local textField1 = screen.newInput(2, 6, xSize-3, \"\", \"Notification line 1\")\
local textField2 = screen.newInput(2, 10, xSize-3, \"\", \"Notification line 2\")\
\
local btnSend = screen.newButton(math.floor(xSize/2)-9, 14, 19, 3, colors.white, colors.gray, \"Send notification\", \"center\")\
\
if ySize-3 < 17 then\
\009screen.resize(17)\
end\
\
while true do\
\009local event, side, x, y = os.pullEvent()\
\
\009if event == \"mouse_click\" then\
\009\009if btnSend.check(x,y) then\
\009\009\009os.sendNotification(nil, textFieldHeader.text, textField1.text, textField2.text)\
\009\009elseif textFieldHeader.check(x,y) or textField1.check(x,y) or textField2.check(x,y) then\
\009\009end\
\009elseif event == \"mouse_scroll\" then\
\009\009screen.scroll(-side)\
\009end\
\
end",
    path = "System/Apps/NotificationsDemo/Start.x",
  },
  {
    text = "{\
  name = \"Packet Manager\",\
  version = \"0.1\",\
  developer = \"DECE\",\
  hidden = true,\
}",
    path = "System/Apps/PacketManager/App.info",
  },
  {
    text = "local args = {...}\
os.loadAPI(\"#API/screenworks\")\
\
local screen = screenworks.newScreen(colors.black, colors.white, colors.cyan, colors.white, \"Packet Manager\")\
local xSize, ySize = screen.body.getSize()\
\
local function getPackInfo(path)\
  local file = fs.open(path, \"r\")\
  if file then\
    local info = file.readAll()\
    info = textutils.unserialize(info)\
    file.close()\
\
    return info\
  end\
end\
\
local function unpackApp(packInfo)\
  local Massiv = packInfo.files\
  local progressBar = screen.newProgressBar(xSize/4+2, ySize/2+3, xSize/2, 0, colors.cyan)\
  local path = \"/User/Apps/\"..packInfo.path\
\009for i=1,#Massiv do\
\009\009if Massiv[i][\"text\"] == \"@empty@empty\" then\
\009\009\009fs.makeDir(path..\"/\"..Massiv[i][\"path\"])\
\009\009else\
\009\009\009local file = fs.open(path..\"/\"..Massiv[i][\"path\"],\"w\")\
\009\009\009file.write(Massiv[i][\"text\"])\
\009\009\009file.close()\
\009\009end\
    progressBar.setPercent((i/#Massiv)*100)\
    sleep(0)\
\009end\
  local file = fs.open(path..\"/\"..\"App.info\", \"w\")\
  file.write(textutils.serialize(packInfo.info))\
  file.close()\
end\
\
local function packApp(path, output, name)\
  local file = fs.open(path..\"/App.info\", \"r\")\
\
  if file then\
    local info = file.readAll()\
    info = textutils.unserialize(info)\
    file.close()\
\
    local progressBar = screen.newProgressBar(xSize/4+2, ySize/2+3, xSize/2, 0, colors.cyan)\
\
    local out = {}\
    out.info = info\
\
    local Massiv2 = {}\
    local function FileList(path, fPath)\
      local Massiv = fs.list(path)\
      if #Massiv==0 then\
        local Massiv2Id = #Massiv2 + 1\
        Massiv2[Massiv2Id] = {}\
        Massiv2[Massiv2Id][\"path\"] = path\
        Massiv2[Massiv2Id][\"text\"] = \"@empty@empty\"\
      else\
        for i=1,#Massiv do\
          if fs.isDir(path..\"/\"..Massiv[i]) and Massiv[i] ~= \"/rom\" and Massiv[i] ~= \"rom\" and Massiv[i] ~= \"Data\" then\
            FileList(path..\"/\"..Massiv[i], fPath..\"/\"..Massiv[i])\
          elseif not fs.isDir(path..\"/\"..Massiv[i]) and Massiv[i] ~= \"/rom\" and Massiv[i] ~= \"rom\" and Massiv[i] ~= \"App.info\" then\
            local Massiv2Id = #Massiv2 + 1\
            Massiv2[Massiv2Id] = {}\
            Massiv2[Massiv2Id][\"path\"] = fPath..\"/\"..Massiv[i]\
            local file = fs.open(path..\"/\"..Massiv[i],\"r\")\
            Massiv2[Massiv2Id][\"text\"] = file.readAll()\
            file.close()\
          end\
          progressBar.setPercent((i/#Massiv)*100)\
          sleep(0)\
        end\
      end\
    end\
    FileList(path, \"\")\
\
    out.files = Massiv2\
    out.path = name\
\
    file=fs.open(output..\"/\"..name..\".lca\",\"w\")\
    file.write(textutils.serialise(out))\
    file.close()\
  end\
end\
\
local function getAppInfo(packInfo)\
  return packInfo.info\
end\
\
if not args[1] then\
  screen.writeText(\"Unknown command\", 1,ySize/3+1, xSize, \"center\")\
elseif string.lower(args[1]) == \"install\" and args[2] then\
  screen.setHeader(\"Installing app\")\
\
  local pack = getPackInfo(args[2])\
  local info = pack and getAppInfo(pack)\
\
  if fs.exists(args[2]) and pack and info then\
    screen.writeText(\"\"..info.name, 1,ySize/3+1, xSize, \"center\")\
    screen.writeText(\"Version: \"..info.version, 1,ySize/3+2, xSize, \"center\", colors.lightGray)\
    unpackApp(pack)\
    screen.writeText(\"Complete\", 1,ySize/2+3, xSize, \"center\", colors.cyan)\
  else\
    screen.writeText(\"Packet not found\", 1,ySize/3+1, xSize, \"center\")\
  end\
\
elseif string.lower(args[1]) == \"create\" and args[2] and args[3] and args[4] then\
  screen.setHeader(\"Creating app packet\")\
\
  if fs.exists(args[2]) then\
    screen.writeText(\"\"..args[4], 1, ySize/3+1, xSize, \"center\")\
    packApp(args[2], args[3], args[4])\
    screen.writeText(\"Complete\", 1,ySize/2+3, xSize, \"center\", colors.cyan)\
  else\
    screen.writeText(\"Project not found\", 1,ySize/3+1, xSize, \"center\")\
  end\
\
elseif string.lower(args[1]) == \"remove\" and args[2] then\
  screen.setHeader(\"Removing app\")\
\
  if fs.exists(\"/User/Apps/\"..args[2]) then\
    local app = os.getAppInfo(args[2])\
    screen.writeText(\"\"..app.name, 1,ySize/3+1, xSize, \"center\")\
    screen.writeText(\"Version: \"..app.version, 1,ySize/3+2, xSize, \"center\", colors.lightGray)\
    fs.delete(\"/User/Apps/\"..args[2])\
    screen.writeText(\"Complete\", 1,ySize/2+3, xSize, \"center\", colors.cyan)\
  else\
    screen.writeText(\"App not found\", 1,ySize/3+1, xSize, \"center\")\
  end\
\
else\
  screen.writeText(\"Unknown command\", 1,ySize/3+1, xSize, \"center\")\
end\
\
local exitBtn = screen.newButton(xSize-6, ySize-1, 6, 1, colors.cyan, colors.white, \"Exit\")\
\
while true do\
  local event, side, x, y = os.pullEvent()\
  if event == \"mouse_click\" then\
    if exitBtn.check(x,y) then\
      break\
    end\
  end\
end",
    path = "System/Apps/PacketManager/Start.x",
  },
  {
    text = " 90 90 90 90 90 90\
 90\14700\14090\14090\14700 90\
 90 90O90S90 90 90\
 90 90 90 90 90 90",
    path = "System/Apps/ScreenworcksDemo/App.ico",
  },
  {
    text = "{\
  name = \"ScreenWorks Demo\",\
  version = \"1.0\",\
  developer = \"DECE\",\
}",
    path = "System/Apps/ScreenworcksDemo/App.info",
  },
  {
    text = "local xSize, ySize = term.getSize()\
os.loadAPI(\"/System/APIs/screenworks\")\
\
os.setBarColor(colors.white)\
\
local startPos = math.floor(xSize/2)-11\
\
local screen = screenworks.newScreen(colors.lightGray,colors.white, colors.white,colors.cyan, \"ScreenWorks Demo\")\
\
screen.writeText(\"This is testing text box with align and other comfortable things...\",startPos,2,24,\"justify\")\
screen.writeText(\"This is testing text box with center align and cyan color...\",startPos,6,24,\"center\",colors.cyan)\
screen.writeText(\"This is testing text box with right align...\",startPos,10,24,\"right\")\
\
screen.writeLine(\"Type something here:\",startPos,13)\
local input = screen.newInput(startPos,14,24,\"\", \"Input field\")\
\
screen.resize(42)\
\
screen.writeLine(\"Drag this range:\",startPos,18)\
local range = screen.newRange(startPos,19,24)\
screen.writeText(range.percent..\"%\",startPos+1,20,24,\"center\")\
\
local btn1 = screen.newButton(startPos,22,8,3,colors.white,colors.gray,\"Button\")\
local btnDialog = screen.newButton(startPos, 29, 24, 3, colors.white,colors.cyan,\"Show dialog\")\
local radio1 = screen.newRadioSet(startPos+10,22, {\"Animate\", \"Not animate\"})\
\
local dropDownList = screen.newDropDownList(startPos, 33, 24, {\"test1\", \"Long test\", \"2x Long long test\", \"3x Long long long test\", \"Another test\", \"And another one\"}, \"Drop-down list\")\
\
screen.writeLine(\"Simple progress bar:\",startPos,26)\
local progress = screen.newProgressBar(startPos,27,24)\
\
local alert = screenworks.select(\"Test dialog\", \"Test dialog message and Some Other Words\", \"Yes\", \"No\", true)\
\
local animate = true\
\
while true do\
  local event, side, x, y = os.pullEvent()\
  if event == \"mouse_click\" then\
    if btn1.check(x,y,animate) then\
      if progress.percent < 100 then\
        for i=1,range.percent/5 do\
          progress.setPercent(progress.percent+5)\
          sleep(0)\
        end\
      else\
        progress.setPercent(0)\
      end\
    elseif radio1.check(x,y) then\
      if radio1.selected == \"Animate\" then\
        animate = true\
      elseif radio1.selected == \"Not animate\" then\
        animate = false\
      end\
    elseif input.check(x,y) then\
    elseif dropDownList.check(x,y) then\
      -- local alr = screenworks.alert(\"Test alert\", \"You Pressed \")\
      -- alr.show()\
      dropDownList.open()\
    elseif btnDialog.check(x,y) then\
      -- local msg = alert.show()\
      -- local alr = screenworks.alert(\"Test alert\", \"You Pressed \"..(msg or \"none\"))\
      -- alr.show()\
      local inp = screenworks.inputDialog(\"Input\",\"Test text\", \"Yes\", \"No\", false, \"Field1\", \"Field2\")\
      local btn, data = inp.show()\
      local alr = screenworks.alert(\"Test alert\", \"You Pressed \"..(btn or \"none\")..\" \"..data.Field1)\
      alr.show()\
    end\
  elseif event == \"mouse_drag\" then\
    range.check(x,y)\
    screen.writeText(range.percent..\"%\",startPos+1,20,24,\"center\")\
  elseif event == \"mouse_scroll\" then\
    screen.scroll(-side)\
  end\
end",
    path = "System/Apps/ScreenworcksDemo/Start.x",
  },
  {
    text = "{\
  name = \"Script runner\",\
  version = \"0.1\",\
  developer = \"DECE\",\
  hidden = true,\
}",
    path = "System/Apps/ScriptRunner/App.info",
  },
  {
    text = "local args = {...}\
\
local xSize, ySize = term.getSize()\
\
term.setBackgroundColor(colors.black)\
term.setTextColor(colors.white)\
term.clear()\
term.setCursorPos(1,1)\
\
local path = args[1]\
local scriptArgs\
\
local function strToTable(str)\
  local tbl = {}\
  local wrd = \"\"\
  for i=1,#str do\
    local chr = string.sub(str,i,i)\
    if chr == \" \" then\
      tbl[#tbl+1] = wrd\
      wrd = \"\"\
    else\
      wrd = wrd..chr\
    end\
  end\
  tbl[#tbl+1] = wrd\
  return tbl\
end\
\
local function execute(path, args)\
  local errors = os.run(os.getEnvironment(), path, args and unpack(args))\
\
  term.setBackgroundColor(colors.black)\
  term.setTextColor(colors.white)\
  term.setCursorPos(xSize,ySize)\
  print(\"\")\
  print(\"Execution completed\")\
  if errors then\
    print(\"\")\
    term.setTextColor(colors.red)\
    print(\"Error: \"..errors)\
  end\
\
  while true do\
    local event = os.pullEvent()\
    if event == \"key\" or event == \"mouse_click\" or event == \"suspend\" then\
      break\
    end\
  end\
end\
\
if path then\
\
  if #args > 1 then\
    scriptArgs = {}\
    for i=1, #args do\
      scriptArgs[#scriptArgs+1] = args[i]\
    end\
  end\
\
  execute(path, scriptArgs)\
else\
  local text\
  while not text or #text < 1 or text ~= {} do\
    print(\"Input script path and arguments:\")\
    term.setCursorPos(2,2)\
    text = strToTable(read())\
    local path = text[1]\
    if path then\
      if #text > 1 then\
        scriptArgs = {}\
        for i=1, #text do\
          scriptArgs[#scriptArgs+1] = text[i]\
        end\
      end\
\
      execute(path, scriptArgs)\
      break\
    end\
  end\
end",
    path = "System/Apps/ScriptRunner/Start.x",
  },
  {
    text = " 90 90 90 90 90 90\
 90\14700\14090\14090\14700 90\
 90 90O90S90 90 90\
 90 90 90 90 90 90",
    path = "System/Apps/Settings/App.ico",
  },
  {
    text = "{\
  name = \"Settings\",\
  version = \"0.1\",\
  developer = \"DECE\",\
}",
    path = "System/Apps/Settings/App.info",
  },
  {
    text = "local xSize, ySize = term.getSize()\
os.loadAPI(\"/System/APIs/screenworks\")\
\
local clear = function(color)\
\009term.setBackgroundColor(color)\
\009term.clear()\
\009term.setCursorPos(1,1)\
end\
\
local text = function(string,xPos,yPos)\
\009term.setCursorPos(xPos,yPos)\
\009term.write(string)\
end\
\
clear(colors.white)\
\
local about = fs.open(\"/System/Build.info\", \"r\")\
about = textutils.unserialize(about.readAll())\
\
local osver = about.OSversion\
local build = about.build\
local build_date = about.build_date\
\
local screen = screenworks.newScreen(colors.lightGray,colors.white, colors.white,colors.cyan, about.name..\" OS\", nil, nil, nil, nil, nil, 8)\
local backBtn = screen.createBackBtn()\
\
if ySize-3 < 17 then\
\009screen.resize(9)\
end\
\
-- btn_os = screen.newButton(1,-1,xSize,7, colors.white,colors.cyan, about.name..\" OS\")\
\
screen.writeLine(\"Computer label: \",2,2)\
screen.writeLine(\"Computer ID: \",2,3)\
screen.writeLine(\"OS version: \",2,5)\
screen.writeLine(\"Build name: \",2,7)\
screen.writeLine(\"Build date: \",2,8)\
\
screen.writeLine(os.getComputerLabel() or \"not set\",xSize-#(os.getComputerLabel() or \"not set\")-1,2)\
screen.writeLine(os.getComputerID(),xSize-#tostring(os.getComputerID())-1,3)\
screen.writeLine(osver,xSize-#osver-1,5)\
screen.writeLine(build,xSize-#build-1,7)\
screen.writeLine(build_date,xSize-#build_date-1,8)\
\
while true do\
\009local event, side, x, y = os.pullEvent()\
\
\009if event == \"mouse_click\" then\
\009\009if backBtn.check(x,y) then\
\009\009\009screen.remove()\
\009\009\009break\
\009\009end\
\009elseif event == \"mouse_scroll\" then\
\009\009screen.scroll(-side)\
\009end\
\
end",
    path = "System/Apps/Settings/Resources/about.x",
  },
  {
    text = "local xSize, ySize = term.getSize()\
os.loadAPI(\"/System/APIs/screenworks\")\
\
local screen = screenworks.newScreen(colors.lightGray,colors.white, colors.lightGray,colors.white, \"Create account\")\
// local backBtn = screen.createBackBtn()\
local btn_cancel = screen.newButton(2,ySize-3,8,1,colors.white,colors.gray,\"Cancel\")\
local btn_create\
screen.writeLine(\"Create\",xSize-7,ySize-3,colors.gray)\
\
local nameInput = screen.newInput(math.floor(xSize/2)-11,ySize/2-5,24,\"Username\")\
local passInput = screen.newInput(math.floor(xSize/2)-11,ySize/2-1,24,\"Password\",string.char(7))\
\
while true do\
  local event, side, x, y = os.pullEvent()\
  if event == \"mouse_click\" then\
    if btn_cancel.check(x,y) then\
      screen.remove()\
      break\
    elseif nameInput.check(x,y) then\
    elseif passInput.check(x,y) then\
    elseif btn_create and btn_create.check(x,y) then\
      local err = os.createAccount(nameInput.text,passInput.text)\
      if err then\
        screen.remove()\
        break\
      end\
    end\
  end\
  if not btn_create and nameInput.text ~= \"\" and nameInput.text ~= \"Username\" and passInput.text ~= \"Password\" then\
    btn_create = screen.newButton(xSize-8,ySize-3,8,1,colors.white,colors.cyan,\"Create\")\
  end\
end",
    path = "System/Apps/Settings/Resources/account_form.x",
  },
  {
    text = "local arg = {...}\
local xSize, ySize = term.getSize()\
os.loadAPI(\"#API/screenworks\")\
\
os.setBarColor(colors.white)\
\
local screen = screenworks.newScreen(colors.lightGray,colors.white, colors.white,colors.cyan, \"\")\
local backBtn = screen.createBackBtn()\
local btn = {}\
\
local info = os.getAPIInfo(arg[1])\
if arg[1] and info then\
  screen.setHeader(info.name)\
  if not info.systemAPI then\
    btn.menu = screen.createMenu(\"Remove\")\
  end\
\
  -- os.loadAPI(\"#API/\"..arg[1])\
  local funcs = {}\
  local function findFunctions(tbl, deep)\
    for name,func in pairs(tbl) do\
      if type(func) == \"function\" then\
        table.insert(funcs, {name, deep})\
      elseif type(func) == \"table\" then\
        findFunctions(func, deep+1)\
      end\
    end\
  end\
\
  local tEnv = {}\
  local fnAPI, err = loadfile( \"#API/\"..arg[1], tEnv )\
  if fnAPI then\
    local ok, err = pcall( fnAPI )\
    if ok then\
      local tAPI = {}\
      for k,v in pairs( tEnv ) do\
        if k ~= \"_ENV\" then\
          tAPI[k] =  v\
        end\
      end\
      findFunctions(tAPI, 1)\
    end\
  end\
\
  btn.icon = screen.drawImage(xSize/2-2,2, \"#SysRes/Images/exec_icon.png\", 6,4)\
  screen.writeText(\"Version: \"..(info.version or \"X.0\"), 1, 7, xSize, \"center\")\
\
  if info.size > 1024 then\
    info.size = math.floor(info.size/1024)..\" KB\"\
  else\
    info.size = info.size..\" B\"\
  end\
\
  screen.writeLine(\"Occupied size:\", 4, 10, colors.black)\
  screen.writeLine(info.size, xSize-#info.size-2, 10)\
\
  screen.writeLine(\"Usage:\", 4, 11, colors.black)\
  screen.writeLine(arg[1], xSize-#arg[1]-2, 11)\
\
  if #funcs > 0 then\
    screen.writeLine(\"Functions:\", 4, 13, colors.black)\
\
    local sx, sy = screen.body.getSize()\
    for i,func in ipairs(funcs) do\
      if 13+i > sy then\
        screen.resize(13+i)\
        sy = 13+i\
      end\
      screen.writeLine(arg[1]..\".\"..func[1]..\"(..)\", 4+func[2], 13+i, colors.lightGray)\
    end\
  end\
end\
\
while true do\
  local event, side, x, y = os.pullEvent()\
\
  if event == \"mouse_click\" then\
    if not info.systemAPI and btn.menu.check(x,y) then\
      local ans = btn.menu.open()\
      if ans == \"Remove\" then\
        local dialog = screenworks.select(\"Remove API\", \"Are you sure? This may cause your system!\", \"Yes\", \"No\")\
        local answ = dialog.show()\
        if answ == \"Yes\" then\
          -- os.runApp(\"PacketManager\", {\"remove\", arg[1]})\
          screen.remove()\
          break\
        end\
      end\
    elseif backBtn.check(x,y) then\
      screen.remove()\
      break\
    end\
  elseif event == \"mouse_scroll\" then\
    screen.scroll(-side)\
  end\
end",
    path = "System/Apps/Settings/Resources/apiinfo.x",
  },
  {
    text = "local xSize, ySize = term.getSize()\
os.loadAPI(\"#API/screenworks\")\
\
os.setBarColor(colors.white)\
\
local screen = screenworks.newScreen(colors.lightGray,colors.white, colors.white,colors.cyan, \"API list\")\
\
local backBtn = screen.createBackBtn()\
local sysAPI = os.getSystemAPIs()\
local usrAPI = os.getUserAPIs()\
\
local apis = {}\
\
screen.resize((#sysAPI+#usrAPI)*3+8)\
\
screen.newInput(1,1,xSize,\"System APIs\")\
\
for i=1,#sysAPI do\
  local info = os.getAPIInfo(sysAPI[i])\
  -- screen.writeLine(info.name,2,i*3+2,colors.gray)\
  if not info.version then\
    info.version = \"X.0\"\
  end\
  apis[#apis+1] = {}\
  apis[#apis].btn  = screen.newButton(2, i*3+2, 22, 1, colors.gray, colors.white, info.name, \"left\")\
  apis[#apis].path = sysAPI[i]\
  screen.writeLine(\"v\"..info.version, xSize-#info.version-2, i*3+2, colors.lightGray)\
  if not info.size then\
    info.size = \"unknown\"\
  else\
    if info.size > 1024 then\
      info.size = math.floor(info.size/1024)..\" KB\"\
    else\
      info.size = info.size..\" B\"\
    end\
  end\
  screen.writeLine(\"Size:\", 2, i*3+3 ,colors.lightGray)\
  screen.writeLine(info.size, xSize-#info.size-1, i*3+3 ,colors.lightGray)\
end\
\
if #usrAPI > 0 then\
  screen.newInput(1,#sysAPI*3+5,xSize,\"User APIs\")\
\
  for i=1,#usrAPI do\
    local info = os.getAPIInfo(usrAPI[i])\
    apis[#apis+1] = {}\
    apis[#apis].btn  = screen.newButton(2, i*3+#sysAPI*3+6, 22, 1, colors.gray, colors.white, info.name, \"left\")\
    apis[#apis].path = usrAPI[i]\
    -- screen.writeLine(info.name,2,i*3+#sysAPI*3+6,colors.gray)\
    if not info.version then\
      info.version = \"X.0\"\
    end\
    screen.writeLine(\"v\"..info.version, xSize-#info.version-2, i*3+#sysAPI*3+6, colors.lightGray)\
    if not info.size then\
      info.size = \"unknown\"\
    else\
      if info.size > 1024 then\
        info.size = math.floor(info.size/1024)..\" KB\"\
      else\
        info.size = info.size..\" B\"\
      end\
    end\
    screen.writeLine(\"Size:\", 2, i*3+#sysAPI*3+7 ,colors.lightGray)\
    screen.writeLine(info.size, xSize-#info.size-1, i*3+#sysAPI*3+7 ,colors.lightGray)\
  end\
end\
\
while true do\
  local event, side, x, y = os.pullEvent()\
\
  if event == \"mouse_click\" then\
    if backBtn.check(x,y) then\
      screen.remove()\
      break\
    else\
      for i=1,#apis do\
        if apis[i].btn.check(x,y) then\
          local err = os.run({},shell.resolve(\"Resources/apiinfo.x\"),apis[i].path)\
          if err then\
            local message = screenworks.alert(\"Error\", err)\
            message.show()\
          end\
    \009\009\009screen.redraw()\
        end\
      end\
    end\
  elseif event == \"mouse_scroll\" then\
    screen.scroll(-side)\
  end\
end",
    path = "System/Apps/Settings/Resources/apis.x",
  },
  {
    text = "local arg = {...}\
local xSize, ySize = term.getSize()\
os.loadAPI(\"#API/screenworks\")\
\
os.setBarColor(colors.white)\
\
local screen = screenworks.newScreen(colors.lightGray,colors.white, colors.white,colors.cyan, \"\")\
local backBtn = screen.createBackBtn()\
local btn = {}\
\
local info = os.getAppInfo(arg[1], true)\
if arg[1] and info then\
  screen.setHeader(info.name)\
  if not info.systemApp then\
    btn.menu = screen.createMenu(\"Remove\", \"Clear data\")\
  end\
\
  if not info.systemApp and fs.exists(\"/User/Apps/\"..arg[1]..\"/App.ico\") then\
    btn.icon = screen.drawImage(xSize/2-2,2, \"/User/Apps/\"..arg[1]..\"/App.ico\", 6,4)\
  elseif info.systemApp and fs.exists(\"/System/Apps/\"..arg[1]..\"/App.ico\") then\
    btn.icon = screen.drawImage(xSize/2-2,2, \"/System/Apps/\"..arg[1]..\"/App.ico\", 6,4)\
  else\
    btn.icon = screen.drawImage(xSize/2-2,2, \"#SysRes/Images/noicon.png\", 6,4)\
  end\
  screen.writeText(\"Version: \"..info.version, 1, 7, xSize, \"center\")\
\
  if info.size > 1024 then\
    info.size = math.floor(info.size/1024)..\" KB\"\
  else\
    info.size = info.size..\" B\"\
  end\
  if info.dataSize > 1024 then\
    info.dataSize = math.floor(info.dataSize/1024)..\" KB\"\
  else\
    info.dataSize = info.dataSize..\" B\"\
  end\
  screen.writeLine(\"Occupied size:\", 4, 10, colors.black)\
  screen.writeLine(info.size, xSize-#info.size-2, 10)\
  screen.writeLine(\"User data size:\", 4, 11, colors.black)\
  screen.writeLine(info.dataSize, xSize-#info.dataSize-2, 11)\
  screen.writeLine(\"Developer:\", 4, 13)\
  screen.writeLine(info.developer, xSize-#info.developer-2, 13)\
end\
\
while true do\
  local event, side, x, y = os.pullEvent()\
\
  if event == \"mouse_click\" then\
    if not info.systemApp and btn.menu.check(x,y) then\
      local ans = btn.menu.open()\
      if ans == \"Clear data\" then\
        if fs.exists(\"/User/Apps/\"..arg[1]..\"/Data\") then\
          local dialog = screenworks.select(\"Clear data\", \"Are you sure?\", \"Yes\", \"No\")\
          local answ = dialog.show()\
\
          if answ == \"Yes\" then\
            fs.delete(\"/User/Apps/\"..arg[1]..\"/Data\")\
            info = os.getAppInfo(arg[1], true)\
            if info.dataSize > 1024 then\
              info.dataSize = math.floor(info.dataSize/1024)..\" KB\"\
            else\
              info.dataSize = info.dataSize..\" B\"\
            end\
            screen.writeText(\"User data size:\", 4, 11, xSize-8, 1, colors.black)\
            screen.writeLine(info.dataSize, xSize-#info.dataSize-2, 11)\
          end\
        else\
          local dialog = screenworks.alert(\"Error\", \"User data not found\")\
          dialog.show()\
        end\
      elseif ans == \"Remove\" then\
        local dialog = screenworks.select(\"Remove app\", \"Are you sure?\", \"Yes\", \"No\")\
        local answ = dialog.show()\
        if answ == \"Yes\" then\
          os.runApp(\"PacketManager\", {\"remove\", arg[1]})\
          screen.remove()\
          break\
        end\
      end\
    elseif backBtn.check(x,y) then\
      screen.remove()\
      break\
    end\
  end\
end",
    path = "System/Apps/Settings/Resources/appinfo.x",
  },
  {
    text = "local xSize, ySize = term.getSize()\
os.loadAPI(\"#API/screenworks\")\
\
os.setBarColor(colors.white)\
\
local screen = screenworks.newScreen(colors.lightGray,colors.white, colors.white,colors.cyan, \"App list\")\
local backBtn = screen.createBackBtn()\
\
local sysApps = os.getSystemApps(true)\
local usrApps = os.getUserApps(true)\
local apps = {}\
\
screen.resize((#sysApps+#usrApps)*3+8)\
\
screen.newInput(1,1,xSize,\"System Apps\")\
\
for i=1,#sysApps do\
  local info = os.getAppInfo(sysApps[i], true)\
  if not info.name then\
    info.name = sysApps[i]\
  end\
  apps[#apps+1] = {}\
  apps[#apps].btn  = screen.newButton(2, i*3+2, 22, 1, colors.gray, colors.white, info.name, \"left\")\
  apps[#apps].path = sysApps[i]\
  -- screen.writeLine(info.name,2,i*3+2,colors.gray)\
  if not info.version then\
    info.version = \"0.0\"\
  end\
  screen.writeLine(\"v\"..info.version, xSize-#info.version-2, i*3+2, colors.lightGray)\
  if not info.size then\
    info.size = \"unknown\"\
  else\
    if info.size > 1024 then\
      info.size = math.floor(info.size/1024)..\" KB\"\
    else\
      info.size = info.size..\" B\"\
    end\
  end\
  screen.writeLine(\"Size:\", 2, i*3+3 ,colors.lightGray)\
  screen.writeLine(info.size, xSize-#info.size-1, i*3+3 ,colors.lightGray)\
end\
\
if #usrApps > 0 then\
  screen.newInput(1,#sysApps*3+5,xSize,\"User Apps\")\
\
  for i=1,#usrApps do\
    local info = os.getAppInfo(usrApps[i], true)\
    apps[#apps+1] = {}\
    apps[#apps].btn  = screen.newButton(2, i*3+#sysApps*3+6, 22, 1, colors.gray, colors.white, info.name, \"left\")\
    apps[#apps].path = usrApps[i]\
    -- screen.writeLine(info.name,2,i*3+#sysApps*3+6,colors.gray)\
    if not info.version then\
      info.version = \"0.0\"\
    end\
    screen.writeLine(\"v\"..info.version, xSize-#info.version-2, i*3+#sysApps*3+6, colors.lightGray)\
    if not info.size then\
      info.size = \"unknown\"\
    else\
      if info.size > 1024 then\
        info.size = math.floor(info.size/1024)..\" KB\"\
      else\
        info.size = info.size..\" B\"\
      end\
    end\
    screen.writeLine(\"Size:\", 2, i*3+#sysApps*3+7 ,colors.lightGray)\
    screen.writeLine(info.size, xSize-#info.size-1, i*3+#sysApps*3+7 ,colors.lightGray)\
  end\
end\
\
while true do\
  local event, side, x, y = os.pullEvent()\
\
  if event == \"mouse_click\" then\
    if backBtn.check(x,y) then\
      screen.remove()\
      break\
    else\
      for i=1,#apps do\
        if apps[i].btn.check(x,y) then\
          os.run({},shell.resolve(\"Resources/appinfo.x\"),apps[i].path)\
    \009\009\009screen.redraw()\
        end\
      end\
    end\
  elseif event == \"mouse_scroll\" then\
    screen.scroll(-side)\
  end\
end",
    path = "System/Apps/Settings/Resources/apps.x",
  },
  {
    text = "local xSize, ySize = term.getSize()\
os.loadAPI(\"/System/APIs/screenworks\")\
\
local time = tonumber(os.getFloatingTime())\
local maxTime = 12\
\
local screen = screenworks.newScreen(colors.lightGray,colors.white, colors.white,colors.cyan, \"Notifications\")\
local backBtn = screen.createBackBtn()\
\
screen.writeLine(\"Floating notifications\", 2, 2, colors.gray)\
local float_switch = screen.newSwitch(xSize-6,2, nil, os.getFloatingEnabled())\
\
screen.writeLine(\"Indicator time\", 2, 5, colors.lightGray)\
local time_range = screen.newRange(2,6, xSize-2, (time/maxTime)*100)\
local time_input = screen.newInput(xSize-10,5,6,tostring(time),\"Time\", \"center\", nil, true)\
screen.writeLine(\"sec\", xSize-3, 5, colors.lightGray)\
\
local function checkTime()\
  if not time then\
    time = 4.0\
    time_input.set(time)\
  elseif time < 0.05 then\
    time = 0.05\
    time_input.set(time)\
  elseif time > maxTime then\
    time = maxTime\
    time_input.set(time)\
  end\
  time_range.set((time/maxTime)*100)\
  os.setFloatingTime(tostring(time))\
end\
\
while true do\
  local event, side, x, y = os.pullEvent()\
  if event == \"mouse_click\" then\
    if backBtn.check(x,y) then\
      screen.remove()\
      break\
    elseif float_switch.check(x,y) then\
      os.setFloatingEnabled(float_switch.state)\
    elseif time_input.check(x,y) then\
      time = tonumber(time_input.text)\
      checkTime()\
    elseif time_range.check(x,y) then\
      time = (time_range.percent/100)*maxTime\
      time_input.set(time)\
      checkTime()\
    end\
  elseif event == \"mouse_drag\" then\
    if time_range.check(x,y) then\
      time = (time_range.percent/100)*maxTime\
      time_input.set(time)\
      checkTime()\
    end\
  end\
end",
    path = "System/Apps/Settings/Resources/notifications.x",
  },
  {
    text = "local xSize, ySize = term.getSize()\
os.loadAPI(\"/System/APIs/screenworks\")\
\
local screen = screenworks.newScreen(colors.lightGray,colors.white, colors.white,colors.cyan, \"Screen\")\
local backBtn = screen.createBackBtn()\
screen.writeLine(\"Color palette\", 2, 2, colors.lightGray)\
\
local colorSettings = fs.list(\"#SysRes/ScreenSettings\")\
local colorButtons = {}\
local colorRadioBox\
\
local selectedPalette = settings.get(\"os.currentPalette_name\")\
\
local rebootMsg = screenworks.select(\"Reboot now?\", \"You should reboot to apply settings\", \"Yes\", \"No\", true)\
\
local function applyColorSet(num)\
  if num == 1 then\
    settings.unset(\"os.currentPalette\")\
    settings.unset(\"os.currentPalette_name\")\
    settings.save(\".settings\")\
    os.applyColorPalette()\
  else\
    if colorButtons[num] then\
      settings.set(\"os.currentPalette\", colorButtons[num].newColors)\
      settings.set(\"os.currentPalette_name\", colorButtons[num].name)\
      settings.save(\".settings\")\
      os.applyColorPalette(colorButtons[num].newColors)\
    end\
  end\
  local answer = rebootMsg.show()\
  if answer == \"Yes\" then\
    os.reboot()\
  end\
end\
\
if colorSettings and #colorSettings > 0 then\
  for i=1, #colorSettings do\
    local file = fs.open(\"#SysRes/ScreenSettings/\"..colorSettings[i], \"r\")\
    colorButtons[i] = textutils.unserialize(file.readAll())\
    colorSettings[i] = colorButtons[i].name\
    file.close()\
  end\
\
  local _, sizeY = screen.body.getSize()\
  if #colorSettings*2+4 > sizeY then\
    screen.resize(#colorSettings*2+4)\
  end\
  colorRadioBox = screen.newRadioSet(3, 4, colorSettings, 1, xSize-4, colors.black)\
  if selectedPalette then\
    colorRadioBox.set(selectedPalette)\
  end\
end\
\
while true do\
  local event, side, x, y = os.pullEvent()\
  if event == \"mouse_click\" then\
    if backBtn.check(x,y) then\
      screen.remove()\
      break\
    elseif colorRadioBox.check(x,y) then\
      applyColorSet(colorRadioBox.selectedNum)\
    end\
  end\
end",
    path = "System/Apps/Settings/Resources/screen.x",
  },
  {
    text = "local xSize, ySize = term.getSize()\
local exist = false\
if fs.exists(\"/User/User.info\") then\
  exist = true\
end\
local acc\
local btn_rename\
local btn_newpass\
os.loadAPI(\"/System/APIs/screenworks\")\
\
\
local screen = screenworks.newScreen(colors.lightGray,colors.white, colors.white,colors.cyan, \"Security\")\
local backBtn = screen.createBackBtn()\
\
if exist then\
  acc = fs.open(\"/User/User.info\",\"r\")\
  acc = textutils.unserialize(acc.readAll())\
\
  screen.writeText(acc.name,1,4,xSize,\"center\")\
  btn_rename = screen.newButton(math.floor(xSize/2)-7,7,17,3,colors.white,colors.gray,\"Rename\")\
  btn_newpass = screen.newButton(math.floor(xSize/2)-7,11,17,3,colors.white,colors.gray,\"Change password\")\
else\
  btn_create = screen.newButton(math.floor(xSize/2)-7,math.floor(ySize/2),16,3,colors.white,colors.gray,\"Create account\")\
end\
\
screen.writeLine(\"Account manager\",2,2)\
\
while true do\
  local event, side, x, y = os.pullEvent()\
  if event == \"mouse_click\" then\
    if backBtn.check(x,y) then\
      screen.remove()\
      break\
    elseif btn_create and btn_create.check(x,y) then\
      os.run({},shell.resolve(\"Resources/account_form.x\"))\
      screen.redraw()\
    end\
  end\
end",
    path = "System/Apps/Settings/Resources/security.x",
  },
  {
    text = "local xSize, ySize = term.getSize()\
os.loadAPI(\"/System/APIs/screenworks\")\
\
local screen = screenworks.newScreen(colors.lightGray,colors.white, colors.white,colors.cyan, \"Storage\")\
local backBtn = screen.createBackBtn()\
local menu = screen.createMenu(\"Clear all data\")\
\
if ySize-3 < 17 then\
\009screen.resize(17)\
end\
\
screen.writeLine(\"Applications\",2,8)\
local appDataBar = screen.newProgressBar(2,9,xSize-3,0)\
screen.writeLine(\"User data\",2,11)\
local userDataBar = screen.newProgressBar(2,12,xSize-3,0)\
\
local freeSpace = fs.getFreeSpace(\"/\")\
local freeSpaceKB = math.floor(freeSpace/1024)\
\
-- screen.writeLine(\"used from \"..freeSpaceKB..\" KB\",2,3)\
local allDataBar = screen.newProgressBar(2,4,xSize-3,0)\
\
local userStorage = 0\
\
local function getSizeOfAll()\
\009local sizeOfAll1 = 0\
\
\009local function files(path)\
\009\009local massiv = fs.list(path)\
\009\009for i=1,#massiv do\
\009\009\009if fs.isDir(fs.combine(path,massiv[i])) and massiv[i] ~= \"rom\" then\
\009\009\009\009files(fs.combine(path,massiv[i]))\
\009\009\009elseif not fs.isDir(fs.combine(path,massiv[i])) then\
\009\009\009\009sizeOfAll1 = sizeOfAll1 + fs.getSize(fs.combine(path,massiv[i]))\
        screen.writeText(tostring(math.floor(sizeOfAll1/1024))..\" KB\", 2, 2, 13, \"left\", colors.cyan)\
        allDataBar.setPercent( sizeOfAll1 / (freeSpace+sizeOfAll1) * 100 )\
\
        if path:sub(1,12) == \"User/Storage\" then\
          userStorage = userStorage + fs.getSize(fs.combine(path,massiv[i]))\
          userDataBar.setPercent( userStorage / (freeSpace+sizeOfAll1) * 100 )\
        end\
\009\009\009end\
\009\009end\
\009end\
\009files(\"\")\
\009return sizeOfAll1\
end\
\
local occupiedSpace = getSizeOfAll()\
\
local allStorage = occupiedSpace+freeSpace\
local allStorageKB = math.floor(allStorage/1024)\
\
local function getSizeOfApps()\
\009local size = 0\
\009local massiv = os.getAppsList()\
\
\009for i=1,#massiv do\
    local info = os.getAppInfo(massiv[i], true)\
\009\009size = size + info.size\
    appDataBar.setPercent( size / allStorage * 100 )\
\009end\
\
\009return size\
end\
\
local appSize = getSizeOfApps()\
local appSizeKB = math.floor(appSize/1024)\
local occupiedSpaceKB = math.floor(occupiedSpace/1024)\
\
screen.writeLine(\"used from \"..math.floor((freeSpace+occupiedSpace)/1024)..\" KB\",2,3)\
\
local userStorageKB = math.floor(userStorage/1024)\
\
screen.writeText(tostring(appSizeKB)..\" KB\", xSize-14, 8, 13, \"right\")\
appDataBar.setPercent( appSize / allStorage * 100 )\
\
screen.writeText(tostring(userStorageKB)..\" KB\", xSize-14, 11, 13, \"right\")\
userDataBar.setPercent( userStorage / allStorage * 100 )\
\
screen.writeText(tostring(occupiedSpaceKB)..\" KB\", 2, 2, 13, \"left\", colors.cyan)\
allDataBar.setPercent( occupiedSpace / allStorage * 100 )\
\
while true do\
  local event, side, x, y = os.pullEvent()\
  if event == \"mouse_click\" then\
    if backBtn.check(x,y) then\
      screen.remove()\
      break\
    elseif menu.check(x,y) then\
      local ans = menu.open()\
    end\
\009elseif event == \"mouse_scroll\" then\
\009\009screen.scroll(-side)\
  end\
end",
    path = "System/Apps/Settings/Resources/storage.x",
  },
  {
    text = "local xSize, ySize = term.getSize()\
os.loadAPI(\"#API/screenworks\")\
\
os.setBarColor(colors.white)\
\
local loadingScreen = screenworks.newScreen(colors.lightGray,colors.white, colors.lightGray,colors.white, \"\", false)\
local btnReboot\
loadingScreen.drawImage(math.floor(xSize/2)-3, 2, \"#SysRes/Images/load_icon.png\")\
loadingScreen.writeText(\"Downloading update\", math.floor(xSize/2)-11, 10, 24, \"center\", colors.lightGray)\
local loadingBar = loadingScreen.newProgressBar(math.floor(xSize/2)-11, 12, 24, 0, colors.cyan, true)\
\
local changesScreen = screenworks.newScreen(colors.lightGray,colors.white, colors.white,colors.cyan, \"What's new\", false)\
local logBackBtn = changesScreen.createBackBtn()\
local logBtnOK = changesScreen.newButton(math.floor(xSize/2)-11, ySize-3, 24, 1, colors.white, colors.lightGray, \"ok\")\
\
local changesList = screenworks.newScreen(colors.white,colors.gray, colors.white,colors.white, \"Changelog\", false, math.floor(xSize/2)-11, 3, 24, ySize-4, 0)\
\
local screen = screenworks.newScreen(colors.lightGray,colors.white, colors.white,colors.cyan, \"Updates\")\
local backBtn = screen.createBackBtn()\
\
local file = http.get(\"https://pastebin.com/raw/e59XLpie\")\
local info = file.readAll()\
file.close()\
info = textutils.unserialize(info)\
\
local curinf = os.getOSinfo()\
\
screen.writeLine(\"Current OS version\", 2, 2)\
screen.writeLine(\"Last OS version\", 2, 4)\
\
local btnNews, btnUpdate\
if info and curinf then\
  screen.writeLine(curinf.OSversion, xSize - #curinf.OSversion-1, 2, (curinf.OSversion == info.OSversion and colors.green) or (curinf.OSversion <= info.OSversion and colors.red) or (curinf.OSversion >= info.OSversion and colors.cyan))\
  screen.writeLine(info.OSversion, xSize - #info.OSversion-1, 4, colors.green)\
\
  if curinf.OSversion < info.OSversion then\
    btnNews = screen.newButton(math.floor(xSize/2)-6, ySize-8, 14, 3, colors.lightGray, colors.white, \"What's new\")\
    btnUpdate = screen.newButton(math.floor(xSize/2)-6, ySize-5, 14, 3, colors.white, colors.cyan, \"Update\")\
  end\
else\
  screen.writeLine(\"error\", xSize - 6, 2, colors.red)\
  screen.writeLine(\"error\", xSize - 6, 4, colors.red)\
end\
\
\
while true do\
  local event, side, x, y = os.pullEvent()\
\
  if event == \"mouse_click\" then\
    if backBtn.check(x,y) then\
      screen.remove()\
      break\
    elseif btnNews and btnNews.check(x,y) then\
      screen.setActive(false)\
      changesScreen.setActive(true)\
      changesList.resize(ySize-4)\
      changesList.body.clear()\
      local size = changesList.writeText(info.changelog[info.OSversion], 2,2,22)\
      if size > ySize-4 then\
        changesList.resize(size+2)\
        changesList.writeText(info.changelog[info.OSversion], 1,2,24)\
      end\
      changesList.setActive(true)\
    elseif btnUpdate and btnUpdate.check(x,y) then\
      screen.setActive(false)\
      loadingScreen.setActive(true)\
\
      local function loading()\
        sleep(1)\
        local updater = http.get(\"https://pastebin.com/raw/MM7AKF2u\")\
        local file = fs.open(\"#tmp/updater.lua\",\"w\")\
        file.write(updater.readAll())\
        file.close()\
        updater.close()\
\
        local image = http.get(info.links[info.OSversion])\
        local file = fs.open(\"#tmp/img\"..info.OSversion..\".info\",\"w\")\
        file.write(image.readAll())\
        file.close()\
        image.close()\
        sleep(2)\
\
        settings.set(\"boot.addNewItem\", {name = \"LegacyOS update \"..info.OSversion, path = \"/Temp/updater.lua\", args = \"/Temp/img\"..info.OSversion..\".info\"})\
        settings.save(\".settings\")\
\
        os.sendNotification(string.char(25), \"OS update\", \"Update is ready.\", \"Reboot to continue\", function() os.reboot() end)\
\
        loadingBar.waiting = false\
        loadingBar.setPercent(100)\
\
        loadingScreen.writeText(\"Update is ready\", math.floor(xSize/2)-11, 10, 24, \"center\", colors.lightGray)\
        btnReboot = loadingScreen.newButton(math.floor(xSize/2)-6, ySize-5, 14, 3, colors.white, colors.cyan, \"Reboot\")\
\
        os.terminateBackgroundTask(\"Downloading update\", \"Settings\")\
      end\
\
      local function waiting()\
        local i = 1\
        while loadingBar.waiting do\
          if i > 142 then\
            i = 1\
          end\
          loadingBar.setPercent(i)\
          i = i + 1\
          sleep(0)\
        end\
      end\
\
      -- parallel.waitForAny(loading, waiting)\
      os.newBackgroundTask(loading, \"Downloading update\")\
      waiting()\
\
\
    elseif btnReboot and btnReboot.check(x,y) then\
      os.reboot()\
    elseif logBtnOK.check(x,y) or logBackBtn.check(x,y) then\
      changesList.setActive(false)\
      changesScreen.setActive(false)\
      screen.setActive(true)\
    end\
  elseif event == \"mouse_scroll\" then\
    if screen.active then\
      screen.scroll(-side)\
    elseif changesList.active then\
      changesList.scroll(-side)\
    end\
  end\
end",
    path = "System/Apps/Settings/Resources/updates.x",
  },
  {
    text = "local xSize, ySize = term.getSize()\
os.loadAPI(\"#API/screenworks\")\
\
os.setBarColor(colors.white)\
\
local about = fs.open(shell.resolve(\"App.info\"), \"r\")\
about = textutils.unserialize(about.readAll())\
\
local screen = screenworks.newScreen(colors.lightGray,colors.white, colors.white,colors.cyan, \"Settings\")\
\
if ySize-3 < 17 then\
\009screen.resize(17)\
end\
\
local btn_apps = screen.newButton(2,2,24,1, colors.gray,colors.white, \"Applications\", \"left\")\
local btn_notifications = screen.newButton(2,4,24,1, colors.gray,colors.white, \"Notifications\", \"left\")\
local btn_security = screen.newButton(2,6,24,1, colors.gray,colors.white, \"Security\", \"left\")\
local btn_storage = screen.newButton(2,8,24,1, colors.gray,colors.white, \"Storage\", \"left\")\
local btn_updates = screen.newButton(2,10,24,1, colors.gray,colors.white, \"Updates\", \"left\")\
local btn_screen = screen.newButton(2,12,24,1, colors.gray,colors.white, \"Screen\", \"left\")\
local btn_API = screen.newButton(2,14,24,1, colors.gray,colors.white, \"APIs\", \"left\")\
local btn_about = screen.newButton(2,16,24,1, colors.gray,colors.white, \"About\", \"left\")\
\
-- local sSwitch = screen.newSwitch(xSize-6,2)\
\
while true do\
\009local event, side, x, y = os.pullEvent()\
\
\009if event == \"mouse_click\" then\
\009\009if btn_about.check(x,y) then\
\009\009\009local err = os.run({},shell.resolve(\"Resources/about.x\"))\
\009\009\009if err then\
\009\009\009\009local message = screenworks.alert(\"Error\", err)\
\009\009\009\009message.show()\
\009\009\009end\
\009\009\009screen.redraw()\
\009\009elseif btn_notifications.check(x,y) then\
\009\009\009local err = os.run(os.getEnvironment(),shell.resolve(\"Resources/notifications.x\"))\
\009\009\009if err then\
\009\009\009\009local message = screenworks.alert(\"Error\", err)\
\009\009\009\009message.show()\
\009\009\009end\
\009\009\009screen.redraw()\
\009\009elseif btn_API.check(x,y) then\
\009\009\009local err = os.run(os.getEnvironment(),shell.resolve(\"Resources/apis.x\"))\
\009\009\009if err then\
\009\009\009\009local message = screenworks.alert(\"Error\", err)\
\009\009\009\009message.show()\
\009\009\009end\
\009\009\009screen.redraw()\
\009\009elseif btn_storage.check(x,y) then\
\009\009\009local err = os.run({},shell.resolve(\"Resources/storage.x\"))\
\009\009\009if err then\
\009\009\009\009local message = screenworks.alert(\"Error\", err)\
\009\009\009\009message.show()\
\009\009\009end\
\009\009\009screen.redraw()\
\009\009elseif btn_apps.check(x,y) then\
\009\009\009local err = os.run(os.getEnvironment(),shell.resolve(\"Resources/apps.x\"))\
\009\009\009if err then\
\009\009\009\009local message = screenworks.alert(\"Error\", err)\
\009\009\009\009message.show()\
\009\009\009end\
\009\009\009screen.redraw()\
\009\009elseif btn_updates.check(x,y) then\
\009\009\009local err = os.run(os.getEnvironment(),shell.resolve(\"Resources/updates.x\"))\
\009\009\009if err then\
\009\009\009\009local message = screenworks.alert(\"Error\", err)\
\009\009\009\009message.show()\
\009\009\009end\
\009\009\009screen.redraw()\
\009\009elseif btn_screen.check(x,y) then\
\009\009\009local err = os.run({},shell.resolve(\"Resources/screen.x\"))\
\009\009\009if err then\
\009\009\009\009local message = screenworks.alert(\"Error\", err)\
\009\009\009\009message.show()\
\009\009\009end\
\009\009\009screen.redraw()\
\009\009elseif btn_security.check(x,y) then\
\009\009\009local err = os.run(os.getEnvironment(),shell.resolve(\"Resources/security.x\"))\
\009\009\009if err then\
\009\009\009\009local message = screenworks.alert(\"Error\", err)\
\009\009\009\009message.show()\
\009\009\009end\
\009\009\009screen.redraw()\
\009\009end\
\009elseif event == \"mouse_scroll\" then\
\009\009screen.scroll(-side)\
\009end\
\
end",
    path = "System/Apps/Settings/Start.x",
  },
  {
    text = " 07 07 07 07 07 07\
 0f 0f 0f 0f 0f 0f\
 0f>9f 0f 0f 0f 0f\
 0f 0f 0f 0f 0f 0f",
    path = "System/Apps/Shell/App.ico",
  },
  {
    text = "{\
  name = \"Shell\",\
  version = \"0.1\",\
  developer = \"DECE\",\
}",
    path = "System/Apps/Shell/App.info",
  },
  {
    text = "local xSize, ySize = term.getSize()\
os.loadAPI(\"#API/screenworks\")\
\
local place = \"/\"\
shell.setDir(place)\
local command = \"\"\
local path = {}\
local textPath = shell.path()\
local env = os.getEnvironment()\
local memory = {}\
local memCursor = 0\
os.setBarColor(colors.black)\
env.place = function()\
  return place\
end\
env.shell = shell\
\
local screen = screenworks.newScreen(colors.white,colors.black, colors.cyan, colors.gray, \"Shell\")\
screen.resize(ySize*2)\
\
env.print = function(text)\
  local sizeX, sizeY = screen.body.getSize()\
  local cursorX, cursorY = screen.body.getCursorPos()\
  while #text > 0 do\
    term.write(text)\
    text = string.sub(text, sizeX - cursorX+2)\
    cursorX, cursorY = 1, cursorY+1\
    if cursorY > sizeY then\
      screen.resize(sizeY + 1)\
      sizeY = sizeY + 1\
    end\
    screen.body.setCursorPos(cursorX, cursorY)\
  end\
end\
\
local function updatePath()\
  path = {}\
  local pos = 0\
  path[pos] = \"\"\
  for i=1,#textPath do\
    if string.sub(textPath,i,i) == \":\" then\
      pos = pos+1\
      path[pos] = \"\"\
    else\
      path[pos] = path[pos]..string.sub(textPath,i,i)\
    end\
  end\
  path[#path+1] = \"/System/Scripts\"\
  path[#path+1] = place\
end\
\
local function stringToTable(str)\
  local pos = 1\
  local tbl = {}\
  tbl[pos] = \"\"\
  for i=1,#str do\
    if string.sub(str,i,i) == \" \" then\
      pos = pos+1\
      tbl[pos] = \"\"\
    else\
      tbl[pos] = tbl[pos]..string.sub(str,i,i)\
    end\
  end\
  return tbl\
end\
\
local function exec(command)\
  updatePath()\
  command = stringToTable(command)\
  local xPos,yPos = screen.body.getCursorPos()\
  -- local newTerm = window.create(screen.body,xPos,yPos,xSize-1,ySize)\
  -- local trm = term.redirect(newTerm)\
  local trm = term.redirect(screen.body)\
\
  if command[1] == \"cd\" then\
    if string.sub(command[2],1,2) == \"..\" then\
      local i = #place\
      while string.sub(place,i,i) ~= \"/\" and i > 0 do\
        i=i-1\
      end\
      if i > 1 then\
        place = string.sub(place,0,i)\
      else\
        place = \"/\"\
      end\
      command[2] = string.sub(command[2],3)\
    elseif string.sub(command[2],1,1) == \"/\" then\
      place = \"/\"\
    end\
    if fs.exists(fs.combine(place,command[2])) then\
      if fs.isDir(fs.combine(place,command[2])) then\
        place = fs.combine(place,command[2])\
        shell.setDir(place)\
        env.shell = shell\
      else\
        term.setTextColor(colors.red)\
        print(command[2]..\" not a directory\")\
      end\
    else\
      term.setTextColor(colors.red)\
      print(\"Can't find \"..command[2])\
    end\
    updatePath()\
  elseif command[1] == \"clear\" then\
    term.setCursorPos(1,1)\
    term.setBackgroundColor(colors.black)\
    term.clear()\
    screen.resize(ySize*2)\
  else\
    for i=1,#path do\
      if fs.exists(fs.combine(path[i],command[1]..\".lua\")) then\
        command[1] = fs.combine(path[i],command[1]..\".lua\")\
        break\
      elseif string.sub(command[1],1,1) ~= \"/\" and fs.exists(fs.combine(path[i],command[1])) then\
        command[1] = fs.combine(path[i],command[1])\
        break\
      elseif string.sub(command[1],1,1) == \"/\" and fs.exists(command[1]) then\
        break\
      end\
    end\
\
    local program = command[1]\
    for i=1,#command-1 do\
      command[i] = command[i+1]\
    end\
    command[#command] = nil\
\
    -- trm = term.redirect(newTerm)\
\
    --term.redirect(screen.body)\
    os.run(env,program,unpack(command))\
    --local xp, yp = newTerm.getCursorPos()\
    --local xp_, yp_ = trm.getCursorPos()\
    --trm.setCursorPos(1,yp_+yp)\
  end\
  term.redirect(trm)\
end\
\
local function preview(text)\
  local lFiles = fs.list(place)\
  local previewText = \"\"\
  local finded = false\
\
  local function find(tbl)\
    for i=1,#tbl do\
      if string.sub(tbl[i],1,#text) == text then\
        previewText = string.sub(tbl[i],#text+1)\
        finded = true\
        break\
      end\
    end\
  end\
\
  local comm = stringToTable(text)\
  text = comm[#comm]\
\
  local slPos\
  for i=1, #text do\
    if string.sub(text,i,i) == \"/\" then\
      slPos = i\
    end\
  end\
\
  if slPos then\
    lFiles = fs.list(fs.combine(place, string.sub(text,1,slPos-1)))\
    text = string.sub(text,slPos+1)\
  end\
\
  if text ~= \"\" then\
    find(lFiles)\
\
    if not finded and not slPos then\
      lFiles = fs.list(path[#path-1])\
      for i=1,#lFiles do\
        lFiles[i] = string.sub(lFiles[i],1,#lFiles[i]-4)\
      end\
      find(lFiles)\
    end\
  end\
\
  return previewText\
end\
\
local function input()\
  local args = \"\"\
  local prev = \"\"\
\
  while true do\
    local xPos,yPos = screen.body.getCursorPos()\
    local sizeX,sizeY = screen.body.getSize()\
    local posX,posY = screen.body.getPosition()\
    if yPos >= sizeY-ySize/2 then\
      screen.resize(sizeY+20)\
    end\
    local ev, sd = os.pullEvent()\
    if ev == 'key' then\
      if sd == keys.enter then\
        screen.body.write(\" ->\")\
        screen.body.setCursorPos(1,yPos+1)\
        exec(args)\
        memCursor = #memory+2\
        memory[#memory+1] = args\
        args = \"\"\
        xPos,yPos = screen.body.getCursorPos()\
      elseif sd == keys.backspace then\
        args = string.sub(args,1,#args-1)\
      elseif sd == keys.up then\
        if memCursor > 1 then\
          memCursor = memCursor-1\
          args = memory[memCursor]\
        end\
      elseif sd == keys.down then\
        if memCursor < #memory then\
          memCursor = memCursor+1\
          args = memory[memCursor]\
        end\
      elseif sd == keys.tab then\
        args = args..prev\
      end\
    elseif ev == 'char' and sd ~= nil then\
      args = args..sd\
    elseif ev == \"mouse_scroll\" then\
      screen.scroll(-sd)\
    elseif ev == \"resume\" then\
      term.redirect(screen.body)\
    end\
    --term.redirect(screen.body)\
    --term.setCursorBlink(true)\
    --screen.body.setCursorBlink(true)\
    prev = preview(args)\
    screen.body.setCursorPos(1,yPos+1)\
    screen.writeLine(\"                                                 \",1,yPos)\
    screen.writeLine(\">\",2,yPos,colors.cyan)\
    screen.body.setTextColor(colors.white)\
    screen.body.setCursorPos(4,yPos)\
    screen.body.write(args)\
    screen.body.setTextColor(colors.lightGray)\
    screen.body.write(prev)\
    -- screen.writeLine(args,4,yPos,colors.white)\
    screen.redraw()\
    screen.writeLine(\"                                                 \",1,2,colors.gray,screen.header)\
    screen.writeLine(\">\"..place,1,2,colors.lightGray,screen.header)\
    screen.body.setCursorPos(4+#args, yPos)\
    screen.body.setCursorBlink(true)\
  end\
end\
\
updatePath()\
input()",
    path = "System/Apps/Shell/Start.x",
  },
  {
    text = "{\
  family = \"LegacyOS\",\
  name = \"Legacy\",\
  core_path = \"/System/Core.x\",\
\
  OSversion = \"0.0.6\",\
  APIversion = \"0.3\",\
\
  build = \"Alpha#6\",\
  build_date = \"09.05.19\",\
}",
    path = "System/Build.info",
  },
  {
    text = "local arg = {...}\
\
local xSize, ySize = term.getSize()\
local centerX = math.floor(xSize/2)\
local centerY = math.floor(ySize/2)\
local backgroundTasks = {}\
local backgroundTasksPerApp = 3\
local tasks = {}\
local tAPIsLoading = {}\
local currentTask = 0\
local currentRunningTask\
local currentRunningBackTask\
local allowBarDrawing = true\
local first = term.native()\
local origin = window.create(term.native(),1,1,xSize,ySize)\
term.redirect(origin)\
\
local showSplash = true\
local saveLog = false\
local withoutDebug = false\
local verbose = false\
local delay = 0\
\
local defaultLauncher = settings.get(\"os.defaultLauncher\", 'Launcher')\
local defaultUI = settings.get(\"os.defaultUI\", \"LegacyUI\")\
\
local floatingEnabled = settings.get(\"os.floatingEnabled\", true)\
local floatingTime = tonumber(settings.get(\"os.floatingTime\", 4.0))\
\
local ui_state, appPosX, appPosY, appSizeX, appSizeY = 1, 1, xSize, ySize-1\
local ui_routine\
local did_mod = false\
local press_mod\
\
local file = fs.open(\"/System/Media/ScreenSettings/1.info\", \"r\")\
local stockPalette = textutils.unserialize(file.readAll()).newColors\
file.close()\
local currentPalette = settings.get(\"os.currentPalette\", stockPalette)\
\
local logBuffer = {}\
local lastLogMsg = \"\"\
\
os.applyColorPalette = function(palette, trm)\
\009if stockPalette and term.setPaletteColor then\
\009\009local palette = palette or stockPalette\
\009\009local trm = trm or term.native()\
\009\009for name, stockColor in pairs(stockPalette) do\
\009\009\009if palette[name] then\
\009\009\009\009trm.setPaletteColor(colors[name], palette[name][1], palette[name][2], palette[name][3])\
\009\009\009else\
\009\009\009\009trm.setPaletteColor(colors[name], stockColor[1], stockColor[2], stockColor[3])\
\009\009\009end\
\009\009end\
\009\009currentPalette = palette\
\009end\
end\
\
os.applyColorPalette(currentPalette)\
\
local errorBuffer\
\
-- env = {}\
\
oldOpen = fs.open\
oldDel = fs.delete\
oldCopy = fs.copy\
oldMove = fs.move\
oldMkdir = fs.makeDir\
oldList = fs.list\
oldSize = fs.getSize\
oldDir = fs.isDir\
oldExist = fs.exists\
oldName = fs.getName\
oldGDir = fs.getDir\
oldReadOnly = fs.isReadOnly\
oldPath = shell.path()\
oldLoadAPI = os.loadAPI\
\
notifications = {}\
\
if arg then\
\009for i=1,#arg do\
\009\009if arg[i] == '--no-splash' then\
\009\009\009showSplash = false\
\009\009elseif arg[i] == '--no-debug' then\
\009\009\009withoutDebug = true\
\009\009elseif arg[i] == '--use-launcher' then\
\009\009\009defaultLauncher = (arg[i+1] or defaultLauncher)\
\009\009elseif arg[i] == '--use-ui' then\
\009\009\009defaultUI = (arg[i+1] or defaultUI)\
\009\009elseif arg[i] == \"-l\" or arg[i] == \"--save-log\" then\
\009\009\009saveLog = true\
\009\009\009verbose = true\
\009\009elseif arg[i] == \"--no-bar\" then\
\009\009\009allowBarDrawing = false\
\009\009elseif arg[i] == \"-v\" or arg[i] == \"--verbose\" then\
\009\009\009verbose = true\
\009\009elseif arg[i] == \"--set-delay\" then\
\009\009\009delay = (tonumber(arg[i+1]) or delay)\
\009\009end\
\009end\
end\
\
function os.run( _tEnv, _sPath, ... )\
\009local tArgs = { ... }\
\009local tEnv = _tEnv\
\
\009local env = os.getEnvironment()\
\
\009if env then\
\009\009for val, name in pairs(env) do\
\009\009\009if not tEnv[name] then\
\009\009\009\009tEnv[name] = val\
\009\009\009end\
\009\009end\
\009end\
\
\009setmetatable( tEnv, { __index = _G } )\
\009local fnFile, err = loadfile( _sPath, tEnv )\
\009if fnFile then\
\009\009local ok, err = pcall( function()\
\009\009\009fnFile( table.unpack( tArgs ) )\
\009\009end )\
\009\009if not ok then\
\009\009\009if err and err ~= \"\" then\
\009\009\009\009return err\
\009\009\009end\
\009\009end\
\009\009return nil\
\009end\
\009if err and err ~= \"\" then\
\009\009return err\
\009end\
end\
\
local function printLog(txt, color)\
\009lastLogMsg = txt\
\009if not showSplash and (not tasks or #tasks == 0) then\
\009\009if not color then\
\009\009\009color = colors.white\
\009\009end\
\009\009term.setTextColor(color)\
\009\009print(txt)\
\009\009term.setTextColor(colors.white)\
\009end\
\009if saveLog then\
\009\009local file = oldOpen(\"/System/boot_log.txt\",\"a\")\
\009\009file.writeLine(txt)\
\009\009file.close()\
\009end\
\009if verbose then\
\009\009logBuffer[#logBuffer+1] = {text = txt, color = (color or colors.white)}\
\009end\
end\
\
if saveLog then\
\009local file = nil\
\009if fs.exists(\"/System/boot_log.txt\") then\
\009\009file = oldOpen(\"/System/boot_log.txt\",\"a\")\
\009else\
\009\009file = oldOpen(\"/System/boot_log.txt\",\"w\")\
\009end\
\009file.writeLine(\"\")\
\009file.writeLine(\"---------------New Boot----------------\")\
\009file.close()\
end\
\
\
printLog(\"Starting...\")\
printLog(\"\")\
oldLoadAPI(\"/System/Media/bootanimation.lua\")\
oldLoadAPI(\"/System/Media/shutanimation.lua\")\
\
local bootScreen = function()\
\009if showSplash then\
\009\009bootanimation.init()\
\009end\
end\
\
local function bootAnimation()\
\009if term.setPaletteColor and showSplash then\
\009\009bootanimation.loop()\
\009end\
end\
\
local shutAnimation = function()\
\009allowBarDrawing = false\
\009if term.setPaletteColor and showSplash then\
\009\009origin.setCursorBlink(false)\
\009\009shutanimation.init()\
\009\009shutanimation.loop()\
\009end\
end\
\
local nativeReboot = os.reboot\
os.reboot = function()\
\009shutAnimation()\
\009nativeReboot()\
\009while true do\
    coroutine.yield()\
  end\
end\
\
local nativeShutdown = os.shutdown\
os.shutdown = function()\
\009shutAnimation()\
\009nativeShutdown()\
  while true do\
    coroutine.yield()\
  end\
end\
\
local function splash()\
  while true do\
    if showSplash then\
      bootAnimation()\
    end\
    sleep(0.2)\
  end\
end\
\
function boot()\
  -------------------------------------------------------------------\
\009printLog(\"Clearing temporary directory\")\
\009fs.delete(\"/Temp\")\
\009fs.makeDir(\"/Temp\")\
\
  printLog(\"Setting up FS API\")\
\
\009local function checkStoragePath(path)\
\009\009if (string.sub(path,1,8) == \"#Storage\" or string.sub(path,1,9) == \"/#Storage\" or string.sub(path,1,10) == \"//#Storage\") then\
\009\009\009return true\
\009\009end\
\009end\
\
\009local function checkResourcesPath(path)\
\009\009if (string.sub(path,1,7) == \"#SysRes\" or string.sub(path,1,8) == \"/#SysRes\" or string.sub(path,1,9) == \"//#SysRes\") then\
\009\009\009return true\
\009\009end\
\009end\
\
\009local function checkTempPath(path)\
\009\009if (string.sub(path,1,4) == \"#tmp\" or string.sub(path,1,5) == \"/#tmp\" or string.sub(path,1,6) == \"//#tmp\") then\
\009\009\009return true\
\009\009end\
\009end\
\
  fs.open = function(path,mode)\
\009\009if (string.sub(path,1,4) == \"#API\" or string.sub(path,1,5) == \"/#API\" or string.sub(path,1,6) == \"//#API\") and mode == \"r\" then\
\009\009\009path = string.sub(path,string.find(path,\"#API\")+4)\
\009\009\009if oldExist(fs.combine(\"/User/APIs/\", path)) then\
\009\009\009\009path = fs.combine(\"/User/APIs/\", path)\
\009\009\009elseif oldExist(fs.combine(\"/System/APIs/\", path)) then\
\009\009\009\009path = fs.combine(\"/System/APIs/\", path)\
\009\009\009end\
\009\009elseif checkResourcesPath(path) and mode == \"r\" then\
\009\009\009path = fs.combine(\"/System/Media\",string.sub(path,string.find(path,\"#SysRes\")+7))\
\009\009elseif checkStoragePath(path) then\
\009\009\009path = fs.combine(\"/User/Storage\",string.sub(path,string.find(path,\"#Storage\")+8))\
\009\009elseif checkTempPath(path) then\
\009\009\009path = fs.combine(\"/Temp\",string.sub(path,string.find(path,\"#tmp\")+4))\
\009\009elseif not currentRunningBackTask and tasks[currentTask] and not tasks[currentTask].running and tasks[currentTask].access > 1 then\
      path = fs.combine(\"User/Apps/\"..tasks[currentTask].path..\"/Data\",path)\
\009\009elseif currentRunningBackTask and backgroundTasks[currentRunningBackTask] and backgroundTasks[currentRunningBackTask].access > 1 then\
\009\009\009path = fs.combine(\"User/Apps/\"..backgroundTasks[currentRunningBackTask].parent..\"/Data\",path)\
\009\009end\
\009\009if not currentRunningBackTask and tasks[currentTask] then\
\009\009\009printLog(\"Trying to get access to the file system, access level: \"..tasks[currentTask].access)\
\009\009\009if tasks[currentTask].running then\
\009\009\009\009tasks[currentTask].running = nil\
\009\009\009end\
\009\009elseif currentRunningBackTask and backgroundTasks[currentRunningBackTask] then\
\009\009\009printLog(\"Trying to get access to the file system from background task, access level: \"..backgroundTasks[currentRunningBackTask].access)\
\009\009end\
\009\009printLog(\"Opening file - Real file path is: \"..path)\
    return oldOpen(path,mode)\
  end\
\
  fs.delete = function(path)\
\009\009if checkStoragePath(path) then\
\009\009\009path = fs.combine(\"/User/Storage\",string.sub(path,string.find(path,\"#Storage\")+8))\
\009\009elseif checkTempPath(path) then\
\009\009\009path = fs.combine(\"/Temp\",string.sub(path,string.find(path,\"#tmp\")+4))\
\009\009elseif not currentRunningBackTask and tasks[currentTask] and not tasks[currentTask].running and tasks[currentTask].access > 1 then\
      path = fs.combine(\"User/Apps/\"..tasks[currentTask].path..\"/Data\",path)\
\009\009elseif currentRunningBackTask and backgroundTasks[currentRunningBackTask] and backgroundTasks[currentRunningBackTask].access > 1 then\
\009\009\009path = fs.combine(\"User/Apps/\"..backgroundTasks[currentRunningBackTask].parent..\"/Data\",path)\
\009\009end\
\009\009printLog(\"Deleting file - Real file path is: \"..path)\
    return oldDel(path)\
  end\
\
  fs.copy = function(path1,path2)\
\009\009-- if checkStoragePath(path1) or checkStoragePath(path2) then\
\009\009-- \009if checkStoragePath(path1) then\
\009\009-- \009\009path1 = fs.combine(\"/User/Storage\",string.sub(path2,string.find(path1,\"#Storage\")+8))\
\009\009-- \009end\
\009\009-- \009if checkStoragePath(path2) then\
\009\009-- \009\009path2 = fs.combine(\"/User/Storage\",string.sub(path2,string.find(path2,\"#Storage\")+8))\
\009\009-- \009end\
    -- elseif tasks[currentTask] and not tasks[currentTask].running and tasks[currentTask].access > 1 then\
    --   path1 = fs.combine(\"User/Apps/\"..tasks[currentTask].path..\"/Data\",path1)\
    --   path2 = fs.combine(\"User/Apps/\"..tasks[currentTask].path..\"/Data\",path2)\
    -- end\
\
\009\009if checkStoragePath(path1) then\
\009\009\009path1 = fs.combine(\"/User/Storage\",string.sub(path2,string.find(path1,\"#Storage\")+8))\
\009\009elseif checkTempPath(path1) then\
\009\009\009path1 = fs.combine(\"/Temp\",string.sub(path,string.find(path1,\"#tmp\")+4))\
\009\009elseif not currentRunningBackTask and tasks[currentTask] and not tasks[currentTask].running and tasks[currentTask].access > 1 then\
      path1 = fs.combine(\"User/Apps/\"..tasks[currentTask].path..\"/Data\",path1)\
\009\009elseif currentRunningBackTask and backgroundTasks[currentRunningBackTask] and backgroundTasks[currentRunningBackTask].access > 1 then\
\009\009\009path1 = fs.combine(\"User/Apps/\"..backgroundTasks[currentRunningBackTask].parent..\"/Data\",path1)\
\009\009end\
\
\009\009if checkStoragePath(path2) then\
\009\009\009path2 = fs.combine(\"/User/Storage\",string.sub(path2,string.find(path2,\"#Storage\")+8))\
\009\009elseif checkTempPath(path2) then\
\009\009\009path2 = fs.combine(\"/Temp\",string.sub(path,string.find(path2,\"#tmp\")+4))\
\009\009elseif not currentRunningBackTask and tasks[currentTask] and not tasks[currentTask].running and tasks[currentTask].access > 1 then\
      path2 = fs.combine(\"User/Apps/\"..tasks[currentTask].path..\"/Data\",path2)\
\009\009elseif currentRunningBackTask and backgroundTasks[currentRunningBackTask] and backgroundTasks[currentRunningBackTask].access > 1 then\
\009\009\009path2 = fs.combine(\"User/Apps/\"..backgroundTasks[currentRunningBackTask].parent..\"/Data\",path2)\
\009\009end\
\
    return oldCopy(path1,path2)\
  end\
\
  fs.move = function(path1,path2)\
\009\009-- if checkStoragePath(path1) or checkStoragePath(path2) then\
\009\009-- \009if checkStoragePath(path1) then\
\009\009-- \009\009path1 = fs.combine(\"/User/Storage\",string.sub(path2,string.find(path1,\"#Storage\")+8))\
\009\009-- \009end\
\009\009-- \009if checkStoragePath(path2) then\
\009\009-- \009\009path2 = fs.combine(\"/User/Storage\",string.sub(path2,string.find(path2,\"#Storage\")+8))\
\009\009-- \009end\
    -- elseif tasks[currentTask] and not tasks[currentTask].running and tasks[currentTask].access > 1 then\
    --   path1 = fs.combine(\"User/Apps/\"..tasks[currentTask].path..\"/Data\",path1)\
    --   path2 = fs.combine(\"User/Apps/\"..tasks[currentTask].path..\"/Data\",path2)\
    -- end\
\
\009\009if checkStoragePath(path1) then\
\009\009\009path1 = fs.combine(\"/User/Storage\",string.sub(path2,string.find(path1,\"#Storage\")+8))\
\009\009elseif checkTempPath(path1) then\
\009\009\009path1 = fs.combine(\"/Temp\",string.sub(path,string.find(path1,\"#tmp\")+4))\
\009\009elseif not currentRunningBackTask and tasks[currentTask] and not tasks[currentTask].running and tasks[currentTask].access > 1 then\
      path1 = fs.combine(\"User/Apps/\"..tasks[currentTask].path..\"/Data\",path1)\
\009\009elseif currentRunningBackTask and backgroundTasks[currentRunningBackTask] and backgroundTasks[currentRunningBackTask].access > 1 then\
\009\009\009path1 = fs.combine(\"User/Apps/\"..backgroundTasks[currentRunningBackTask].parent..\"/Data\",path1)\
\009\009end\
\
\009\009if checkStoragePath(path2) then\
\009\009\009path2 = fs.combine(\"/User/Storage\",string.sub(path2,string.find(path2,\"#Storage\")+8))\
\009\009elseif checkTempPath(path2) then\
\009\009\009path2 = fs.combine(\"/Temp\",string.sub(path,string.find(path2,\"#tmp\")+4))\
\009\009elseif not currentRunningBackTask and tasks[currentTask] and not tasks[currentTask].running and tasks[currentTask].access > 1 then\
      path2 = fs.combine(\"User/Apps/\"..tasks[currentTask].path..\"/Data\",path2)\
\009\009elseif currentRunningBackTask and backgroundTasks[currentRunningBackTask] and backgroundTasks[currentRunningBackTask].access > 1 then\
\009\009\009path2 = fs.combine(\"User/Apps/\"..backgroundTasks[currentRunningBackTask].parent..\"/Data\",path2)\
\009\009end\
    return oldMove(path1,path2)\
  end\
\
  fs.makeDir = function(path)\
\009\009if checkStoragePath(path) then\
\009\009\009path = fs.combine(\"/User/Storage\",string.sub(path,string.find(path,\"#Storage\")+8))\
\009\009elseif checkTempPath(path) then\
\009\009\009path = fs.combine(\"/Temp\",string.sub(path,string.find(path,\"#tmp\")+4))\
\009\009elseif not currentRunningBackTask and tasks[currentTask] and not tasks[currentTask].running and tasks[currentTask].access > 1 then\
      path = fs.combine(\"User/Apps/\"..tasks[currentTask].path..\"/Data\",path)\
\009\009elseif currentRunningBackTask and backgroundTasks[currentRunningBackTask] and backgroundTasks[currentRunningBackTask].access > 1 then\
\009\009\009path = fs.combine(\"User/Apps/\"..backgroundTasks[currentRunningBackTask].parent..\"/Data\",path)\
\009\009end\
    return oldMkdir(path)\
  end\
\
  fs.list = function(path)\
\009\009if checkStoragePath(path) then\
\009\009\009path = fs.combine(\"/User/Storage\",string.sub(path,string.find(path,\"#Storage\")+8))\
\009\009elseif checkResourcesPath(path) then\
\009\009\009path = fs.combine(\"/System/Media\",string.sub(path,string.find(path,\"#SysRes\")+7))\
\009\009elseif checkTempPath(path) then\
\009\009\009path = fs.combine(\"/Temp\",string.sub(path,string.find(path,\"#tmp\")+4))\
\009\009elseif not currentRunningBackTask and tasks[currentTask] and not tasks[currentTask].running and tasks[currentTask].access > 1 then\
      path = fs.combine(\"User/Apps/\"..tasks[currentTask].path..\"/Data\",path)\
\009\009elseif currentRunningBackTask and backgroundTasks[currentRunningBackTask] and backgroundTasks[currentRunningBackTask].access > 1 then\
\009\009\009path = fs.combine(\"User/Apps/\"..backgroundTasks[currentRunningBackTask].parent..\"/Data\",path)\
\009\009end\
    return oldList(path)\
  end\
\
  fs.getSize = function(path)\
\009\009if checkStoragePath(path) then\
\009\009\009path = fs.combine(\"/User/Storage\",string.sub(path,string.find(path,\"#Storage\")+8))\
\009\009elseif checkResourcesPath(path) then\
\009\009\009path = fs.combine(\"/System/Media\",string.sub(path,string.find(path,\"#SysRes\")+7))\
\009\009elseif checkTempPath(path) then\
\009\009\009path = fs.combine(\"/Temp\",string.sub(path,string.find(path,\"#tmp\")+4))\
\009\009elseif not currentRunningBackTask and tasks[currentTask] and not tasks[currentTask].running and tasks[currentTask].access > 1 then\
      path = fs.combine(\"User/Apps/\"..tasks[currentTask].path..\"/Data\",path)\
\009\009elseif currentRunningBackTask and backgroundTasks[currentRunningBackTask] and backgroundTasks[currentRunningBackTask].access > 1 then\
\009\009\009path = fs.combine(\"User/Apps/\"..backgroundTasks[currentRunningBackTask].parent..\"/Data\",path)\
\009\009end\
    return oldSize(path)\
  end\
\
  fs.isDir = function(path)\
\009\009if checkStoragePath(path) then\
\009\009\009path = fs.combine(\"/User/Storage\",string.sub(path,string.find(path,\"#Storage\")+8))\
\009\009elseif checkResourcesPath(path) then\
\009\009\009path = fs.combine(\"/System/Media\",string.sub(path,string.find(path,\"#SysRes\")+7))\
\009\009elseif checkTempPath(path) then\
\009\009\009path = fs.combine(\"/Temp\",string.sub(path,string.find(path,\"#tmp\")+4))\
\009\009elseif not currentRunningBackTask and tasks[currentTask] and not tasks[currentTask].running and tasks[currentTask].access > 1 then\
      path = fs.combine(\"User/Apps/\"..tasks[currentTask].path..\"/Data\",path)\
\009\009elseif currentRunningBackTask and backgroundTasks[currentRunningBackTask] and backgroundTasks[currentRunningBackTask].access > 1 then\
\009\009\009path = fs.combine(\"User/Apps/\"..backgroundTasks[currentRunningBackTask].parent..\"/Data\",path)\
\009\009end\
    return oldDir(path)\
  end\
\
  fs.exists = function(path)\
\009\009if checkStoragePath(path) then\
\009\009\009path = fs.combine(\"/User/Storage\",string.sub(path,string.find(path,\"#Storage\")+8))\
\009\009elseif checkResourcesPath(path) then\
\009\009\009path = fs.combine(\"/System/Media\",string.sub(path,string.find(path,\"#SysRes\")+7))\
\009\009elseif checkTempPath(path) then\
\009\009\009path = fs.combine(\"/Temp\",string.sub(path,string.find(path,\"#tmp\")+4))\
\009\009elseif not currentRunningBackTask and tasks[currentTask] and not tasks[currentTask].running and tasks[currentTask].access > 1 then\
      path = fs.combine(\"User/Apps/\"..tasks[currentTask].path..\"/Data\",path)\
\009\009elseif currentRunningBackTask and backgroundTasks[currentRunningBackTask] and backgroundTasks[currentRunningBackTask].access > 1 then\
\009\009\009path = fs.combine(\"User/Apps/\"..backgroundTasks[currentRunningBackTask].parent..\"/Data\",path)\
\009\009end\
    return oldExist(path)\
  end\
\
  fs.getName = function(path)\
\009\009if checkStoragePath(path) then\
\009\009\009path = fs.combine(\"/User/Storage\",string.sub(path,string.find(path,\"#Storage\")+8))\
\009\009elseif checkResourcesPath(path) then\
\009\009\009path = fs.combine(\"/System/Media\",string.sub(path,string.find(path,\"#SysRes\")+7))\
\009\009elseif checkTempPath(path) then\
\009\009\009path = fs.combine(\"/Temp\",string.sub(path,string.find(path,\"#tmp\")+4))\
\009\009elseif not currentRunningBackTask and tasks[currentTask] and not tasks[currentTask].running and tasks[currentTask].access > 1 then\
      path = fs.combine(\"User/Apps/\"..tasks[currentTask].path..\"/Data\",path)\
\009\009elseif currentRunningBackTask and backgroundTasks[currentRunningBackTask] and backgroundTasks[currentRunningBackTask].access > 1 then\
\009\009\009path = fs.combine(\"User/Apps/\"..backgroundTasks[currentRunningBackTask].parent..\"/Data\",path)\
\009\009end\
    return oldName(path)\
  end\
\
  fs.getDir = function(path)\
\009\009if checkStoragePath(path) then\
\009\009\009path = fs.combine(\"/User/Storage\",string.sub(path,string.find(path,\"#Storage\")+8))\
\009\009elseif checkResourcesPath(path) then\
\009\009\009path = fs.combine(\"/System/Media\",string.sub(path,string.find(path,\"#SysRes\")+7))\
\009\009elseif checkTempPath(path) then\
\009\009\009path = fs.combine(\"/Temp\",string.sub(path,string.find(path,\"#tmp\")+4))\
\009\009elseif not currentRunningBackTask and tasks[currentTask] and not tasks[currentTask].running and tasks[currentTask].access > 1 then\
      path = fs.combine(\"User/Apps/\"..tasks[currentTask].path..\"/Data\",path)\
\009\009elseif currentRunningBackTask and backgroundTasks[currentRunningBackTask] and backgroundTasks[currentRunningBackTask].access > 1 then\
\009\009\009path = fs.combine(\"User/Apps/\"..backgroundTasks[currentRunningBackTask].parent..\"/Data\",path)\
\009\009end\
    return oldGDir(path)\
  end\
\
  fs.isReadOnly = function(path)\
\009\009if checkStoragePath(path) then\
\009\009\009path = fs.combine(\"/User/Storage\",string.sub(path,string.find(path,\"#Storage\")+8))\
\009\009elseif checkResourcesPath(path) then\
\009\009\009path = \"/rom/startup.lua\"\
\009\009elseif checkTempPath(path) then\
\009\009\009path = fs.combine(\"/Temp\",string.sub(path,string.find(path,\"#tmp\")+4))\
\009\009elseif not currentRunningBackTask and tasks[currentTask] and not tasks[currentTask].running and tasks[currentTask].access > 1 then\
      path = fs.combine(\"User/Apps/\"..tasks[currentTask].path..\"/Data\",path)\
\009\009elseif currentRunningBackTask and backgroundTasks[currentRunningBackTask] and backgroundTasks[currentRunningBackTask].access > 1 then\
\009\009\009path = fs.combine(\"User/Apps/\"..backgroundTasks[currentRunningBackTask].parent..\"/Data\",path)\
\009\009end\
    return oldReadOnly(path)\
  end\
\
\009os.loadAPI = function(_sPath)\
\009\009if not _sPath:sub(1,1) ~= \"/\" and not (_sPath:sub(1,4) == \"#API\" or _sPath:sub(1,5) == \"/#API\" or _sPath:sub(1,6) == \"//#API\") then\
\009\009\009_sPath = fs.combine(\"#API\", _sPath)\
\009\009end\
\
\009\009if type( _sPath ) ~= \"string\" then\
      error( \"bad argument #1 (expected string, got \" .. type( _sPath ) .. \")\", 2 )\
    end\
    local sName = fs.getName( _sPath )\
    if sName:sub(-4) == \".lua\" or sName:sub(-4) == \".api\" or sName:sub(-4) == \".dll\" or sName:sub(-4) == \".lib\" then\
      sName = sName:sub(1,-5)\
    end\
    if tAPIsLoading[sName] == true then\
      printLog( \"API \"..sName..\" is already being loaded\" )\
      return false\
    end\
    tAPIsLoading[sName] = true\
\
    local tEnv = os.getEnvironment()\
    setmetatable( tEnv, { __index = _G } )\
    local fnAPI, err = loadfile( _sPath, tEnv )\
    if fnAPI then\
      local ok, err = pcall( fnAPI )\
      if not ok then\
        tAPIsLoading[sName] = nil\
\009\009\009\009printLog(\"API \"..sName..\" error: \"..err..\" | \".._sPath)\
\009\009\009\009error( err )\
        return false\
      end\
    else\
      tAPIsLoading[sName] = nil\
\009\009\009printLog(\"API \"..sName..\" error: \"..err..\" | \".._sPath)\
\009\009\009error( err )\
      return false\
    end\
\
    local tAPI = {}\
    for k,v in pairs( tEnv ) do\
      if k ~= \"_ENV\" then\
        tAPI[k] =  v\
      end\
    end\
\
    _G[sName] = tAPI\
    tAPIsLoading[sName] = nil\
    return true\
\009end\
\
\009os.unloadAPI = function( _sName )\
    if type( _sName ) ~= \"string\" then\
      error( \"bad argument #1 (expected string, got \" .. type( _sName ) .. \")\", 2 )\
    end\
    if _sName ~= \"_G\" and type(_G[_sName]) == \"table\" then\
      _G[_sName] = nil\
    end\
\009end\
\
\009oldLoadAPI(\"/System/APIs/screenworks\")\
\009oldLoadAPI(\"/System/APIs/images\")\
\009oldLoadAPI(\"/System/APIs/advanced_read\")\
\
\009os.getSystemAPIs = function()\
\009\009return oldList(\"/System/APIs\")\
\009end\
\
\009os.getUserAPIs = function()\
\009\009return oldList(\"User/APIs\")\
\009end\
\
\009os.getAPIInfo = function(api)\
\009\009local info = {}\
\009\009local path\
\009\009if oldExist(\"/User/APIs/\"..api) then\
\009\009\009path = \"/User/APIs/\"..api\
\009\009elseif oldExist(\"/System/APIs/\"..api) then\
\009\009\009path = \"/System/APIs/\"..api\
\009\009\009info.systemAPI = true\
\009\009end\
\009\009if path then\
\009\009\009--local API = require(path)\
\009\009\009local API = oldOpen(path,\"r\")\
\009\009\009local line = API.readLine()\
\009\009\009if string.sub(line,1,2) == \"--\" then\
\009\009\009\009info.name = string.sub(line,3)\
\009\009\009else\
\009\009\009\009info.name = api\
\009\009\009end\
\009\009\009line = API.readLine()\
\009\009\009if string.sub(line,1,2) == \"--\" then\
\009\009\009\009info.version = string.sub(line,3)\
\009\009\009end\
\009\009\009API.close()\
\009\009\009info.size = oldSize(path)\
\009\009\009API = nil\
\
\009\009\009return info\
\009\009end\
\009end\
\
\009os.getOSinfo = function()\
\009\009local file = oldOpen(\"/System/Build.info\", \"r\")\
\009\009local about = textutils.unserialize(file.readAll())\
\009\009file.close()\
\009\009return about\
\009end\
\
  -----------------------------------------------------------------\
  printLog(\"Setting up OS API\")\
\
\009os.setBarColor = function(color)\
\009\009if tasks[currentTask] then\
\009\009\009tasks[currentTask].style = color\
\009\009end\
\009end\
\
\009os.sort = function(tbl)\
\009\009local tbl = tbl or {}\
\009\009table.sort(tbl)\
\009\009return tbl\
\009end\
\
\009local function getSize(path)\
\009\009local size = 0\
\009\009if oldDir(path) then\
\009\009\009local files = oldList(path)\
\009\009\009for i=1,#files do\
\009\009\009\009size = size + getSize(fs.combine(path, files[i]))\
\009\009\009end\
\009\009else\
\009\009\009size = size + oldSize(path)\
\009\009end\
\009\009return size\
\009end\
\
\009os.getAppInfo = function(app, get_Size)\
\009\009local path\
\009\009local system\
\009\009if oldExist(\"/User/Apps/\"..app) then\
\009\009\009path = \"/User/Apps/\"..app..\"/App.info\"\
\009\009elseif oldExist(\"/System/Apps/\"..app) then\
\009\009\009path = \"/System/Apps/\"..app..\"/App.info\"\
\009\009\009system = true\
\009\009end\
\009\009if path then\
\009\009\009local file = oldOpen(path, \"r\")\
\009\009\009local info\
\009\009\009if file then\
\009\009\009\009info = file.readAll()\
\009\009\009\009file.close()\
\009\009\009\009info = textutils.unserialize(info)\
\009\009\009\009if not info.name then\
\009\009\009\009\009info.name = app\
\009\009\009\009end\
\009\009\009else\
\009\009\009\009info = {}\
\009\009\009\009info.name = app\
\009\009\009end\
\009\009\009if not info.version then\
\009\009\009\009info.version = \"X.0\"\
\009\009\009end\
\009\009\009if not info.developer then\
\009\009\009\009info.developer = \"Unknown\"\
\009\009\009end\
\009\009\009if get_Size then\
\009\009\009\009info.size = getSize(string.sub(path,1,#path-8))\
\009\009\009\009if oldExist(fs.combine(string.sub(path,1,#path-8), \"Data\")) then\
\009\009\009\009\009info.dataSize = getSize(fs.combine(string.sub(path,1,#path-8), \"Data\"))\
\009\009\009\009else\
\009\009\009\009\009info.dataSize = 0\
\009\009\009\009end\
\009\009\009end\
\009\009\009info.systemApp = system\
\009\009\009return info\
\009\009end\
\009end\
\
\009local function getApps(path)\
\009\009local apps = oldList(path)\
\009\009local i = 1\
\009\009while apps[i] do\
\009\009\009local appInfo = os.getAppInfo(apps[i])\
\009\009\009if appInfo and appInfo.hidden then\
\009\009\009\009table.remove(apps,i)\
\009\009\009else\
\009\009\009\009i=i+1\
\009\009\009end\
\009\009end\
\009\009return apps\
\009end\
\
\009os.getSystemApps = function(withHidden)\
\009\009local apps\
\009\009if not withHidden then\
\009\009\009withHidden = true\
\009\009else\
\009\009\009withHidden = false\
\009\009end\
\009\009if withHidden then\
\009\009\009return getApps(\"/System/Apps\")\
\009\009else\
\009\009\009return oldList(\"/System/Apps\")\
\009\009end\
\009end\
\
\009os.getUserApps = function(withHidden)\
\009\009local apps\
\009\009if not withHidden then\
\009\009\009apps = getApps(\"/User/Apps\")\
\009\009else\
\009\009\009apps = oldList(\"/User/Apps\")\
\009\009end\
\009\009return apps\
\009end\
\
\009os.getAppsList = function(withHidden)\
\009\009local sysApps = os.getSystemApps(withHidden)\
\009\009local usrApps = os.getUserApps(withHidden)\
\
\009\009local pos = #sysApps\
\009\009local inc = 1\
\009\009local find\
\009\009for i=1,#usrApps do\
\009\009\009find = false\
\009\009\009for j=1,pos do\
\009\009\009\009if sysApps[j] == usrApps[i] then\
\009\009\009\009\009find = true\
\009\009\009\009\009break\
\009\009\009\009end\
\009\009\009end\
\009\009\009local appInfo = os.getAppInfo(usrApps[i])\
\009\009\009if find == false then\
\009\009\009\009sysApps[pos+inc] = usrApps[i]\
\009\009\009\009inc = inc + 1\
\009\009\009end\
\009\009end\
\
\009\009return os.sort(sysApps)\
\009end\
\
\009os.getRunningTasks = function()\
\009\009return tasks\
\009end\
\
\009os.getCurrentTask = function()\
\009\009return currentTask\
\009end\
\
\009os.getFloatingEnabled = function()\
\009\009return floatingEnabled\
\009end\
\
\009os.setFloatingEnabled = function(state)\
\009\009floatingEnabled = state\
\009\009settings.set(\"os.floatingEnabled\", state)\
\009\009settings.save(\"/.settings\")\
\009end\
\
\009os.getFloatingTime = function()\
\009\009return tonumber(floatingTime)\
\009end\
\
\009os.setFloatingTime = function(time)\
\009\009floatingTime = time\
\009\009settings.set(\"os.floatingTime\", time)\
\009\009settings.save(\"/.settings\")\
\009end\
\
  os.pullEvent = function()\
  \009local ev, side, x, y = os.pullEventRaw()\
  \009if ev ~= \"terminate\" then\
  \009\009return ev, side, x, y\
  \009end\
  end\
\
\009local function encrypt(password)\
\009  local new_password = \"\"\
\009  local step = 0\
\009  for i=1,#password do\
\009    step = step+string.byte(string.sub(password,i,i))\
\009  end\
\009\009step = math.floor(step/#password)\
\009  local char = \"\"\
\
\009  for i=1,#password do\
\009    char = string.sub(password,i,i)\
\009    new_password = new_password..string.char(string.byte(char)+step)\
\009  end\
\
\009  return new_password\
\009end\
\
\009local function decrypt(password,code)\
\009  local new_password = \"\"\
\009  local step = 0\
\009  for i=1,#code do\
\009    step = step+string.byte(string.sub(code,i,i))\
\009  end\
\009\009step = math.floor(step/#code)\
\009  local char = \"\"\
\
\009  for i=1,#password do\
\009    char = string.sub(password,i,i)\
\009    new_password = new_password..string.char(string.byte(char)-step)\
\009  end\
\
\009  return new_password\
\009end\
\
\009os.printLog = function(txt, app)\
\009\009if not app then\
\009\009\009printLog(\"[\"..tasks[currentTask].path..\"] - \"..txt)\
\009\009else\
\009\009\009printLog(\"[\"..app..\"] - \"..txt)\
\009\009end\
\009end\
\
\009os.getLastLogMessage = function()\
\009\009return lastLogMsg\
\009end\
\
\009os.getSystemDelay = function()\
\009\009return ((delay > 0.05 and delay) or 0.05)\
\009end\
\
\009os.createAccount = function(userName,password)\
\009\009if not oldExist(\"/User/User.info\") and userName and password then\
\009\009\009printLog('Trying to create account \"'..userName..'\"')\
\009    local user = {}\
\009    user.name = userName\
\009\009\009os.setComputerLabel(userName)\
\009    user.password = encrypt(password)\
\009    local file = oldOpen(\"/User/User.info\", \"w\")\
\009    file.write(textutils.serialize(user))\
\009    file.close()\
\009    return true\
\009  end\
\009end\
\
\009os.changePassword = function(oldPassword,newPassword)\
\009\009if oldExist(\"/User/User.info\") and oldPassword and newPassword then\
\009\009\009printLog('Trying to change account password')\
\009    local user = {}\
\009    user.name = \"\"\
\009    user.password = encrypt(newPassword)\
\
\009    local file = oldOpen(\"/User/User.info\", \"r\")\
\009    file = textutils.unserialize(file.readAll())\
\
\009    if decrypt(file.password,oldPassword) == oldPassword then\
\009      user.name = file.name\
\009      file = oldOpen(\"/User/User.info\", \"w\")\
\009      file.write(textutils.serialize(user))\
\009      file.close()\
\009\009\009\009printLog(\"Success\")\
\009      return true\
\009    end\
\009  end\
\009end\
\
\009os.changeName = function(password,newName)\
\009\009if oldExist(\"/User/User.info\") and password and newName then\
\009\009\009printLog('Trying to change account name to \"'..newName..'\"')\
\009    local user = {}\
\009    user.name = newName\
\009\009\009os.setComputerLabel(newName)\
\009    user.password = \"\"\
\
\009    local file = oldOpen(\"/User/User.info\", \"r\")\
\009    file = textutils.unserialize(file.readAll())\
\
\009    if decrypt(file.password,password) == password then\
\009      user.password = file.password\
\009      file = oldOpen(\"/User/User.info\", \"w\")\
\009      file.write(textutils.serialize(user))\
\009      file.close()\
\009\009\009\009printLog(\"Success\")\
\009      return true\
\009    end\
\009  end\
\009end\
\
\009os.verifyAccaunt = function(password)\
\009\009if oldExist(\"/User/User.info\") and password then\
\009\009\009printLog('Trying to verify account')\
\009    local file = oldOpen(\"/User/User.info\", \"r\")\
\009    local inf = textutils.unserialize(file.readAll())\
\009\009\009file.close()\
\
\009    if decrypt(inf.password,password) == password then\
\009\009\009\009printLog(\"Success\")\
\009      return true\
\009    end\
\009  end\
\009end\
\
\009os.getImageSize = function(path)\
\009\009local file = fs.open(path, \"r\")\
\009\009local image = file.readLine()\
\009\009local sizeX, sizeY = 0, 0\
\009\009while image do\
\009\009\009sizeY = sizeY+1\
\009\009\009if sizeX < #image then\
\009\009\009\009sizeX = #image\
\009\009\009end\
\009\009\009image = file.readLine()\
\009\009end\
\009\009file.close()\
\009\009return sizeX, sizeY\
\009end\
\
\009os.advancedRead = advanced_read.read\
\
\009read = function(char)\
\009\009local trm = term.current()\
\009\009local xSize = trm.getSize()\
\009\009local posX, posY = trm.getCursorPos()\
\009\009return os.advancedRead(trm, posX, posY, xSize-posX, nil, char)\
\009end\
\
\009os.getAppIcon = function(app)\
\009\009local path\
\009\009local img\
\009\009if oldExist(\"/User/Apps/\"..app) then\
\009\009\009path = \"/User/Apps/\"..app..\"/App.ico\"\
\009\009elseif oldExist(\"/System/Apps/\"..app) then\
\009\009\009path = \"/System/Apps/\"..app..\"/App.ico\"\
\009\009else\
\009\009\009path = \"/System/Media/Images/noicon.png\"\
\009\009end\
\009\009if path then\
\009\009\009local info = oldOpen(path, \"r\")\
\009\009\009if info then\
\009\009\009\009img = images.loadImage(info)\
\009\009\009\009info.close()\
\009\009\009\009return img\
\009\009\009end\
\009\009end\
\009end\
\
\009os.drawImage = images.draw\
\
\009os.sendNotification = function(icon,header,text,text2,btn_script)\
\009\009if tasks[currentRunningTask] and not tasks[currentRunningTask].silentMode then\
\009\009\009notifications[#notifications+1] = {\
\009\009\009\009icon = (icon or string.char(7)),\
\009\009\009\009header = (header or tasks[currentRunningTask].name),\
\009\009\009\009text = (text or \"\"),\
\009\009\009\009text2 = (text2 or \"\"),\
\009\009\009\009btn_script = btn_script,\
\009\009\009\009app = tasks[currentRunningTask].path,\
\009\009\009}\
\009\009\009os.queueEvent(\"system.sendNotification\", notifications[#notifications])\
\009\009else\
\009\009\009notifications[#notifications+1] = {\
\009\009\009\009icon = (icon or string.char(7)),\
\009\009\009\009header = (header or \"SystemUI\"),\
\009\009\009\009text = (text or \"\"),\
\009\009\009\009text2 = (text2 or \"\"),\
\009\009\009\009btn_script = btn_script,\
\009\009\009\009app = \"SystemUI\",\
\009\009\009}\
\009\009\009os.queueEvent(\"system.sendNotification\", notifications[#notifications])\
\009\009end\
\009end\
\
\009os.getNotifications = function()\
\009\009return (notifications or {})\
\009end\
\
\009os.removeNotification = function(num)\
\009\009if notifications[num] then\
\009\009\009os.queueEvent(\"system.removeNotification\", notifications[num], num)\
\009\009\009table.remove(notifications, num)\
\009\009end\
\009end\
\
\009os.clearNotifications = function()\
\009\009if #notifications > 0 then\
\009\009\009notifications = {}\
\009\009\009os.queueEvent(\"system.clearNotifications\")\
\009\009end\
\009end\
\
\009-----------------------------------------------------------------\
  printLog(\"Setting up Environment\")\
\
\009shell.getRunningProgram = function()\
\009\009if tasks[currentTask].access > 1 then\
\009\009\009return tasks[currentTask].path..\"/Start.x\"\
\009\009else\
\009\009\009return \"/System/Apps/\"..tasks[currentTask].path..\"/Start.x\"\
\009\009end\
\009end\
\
\009shell.resolve = function(path)\
\009\009if tasks[currentTask].access > 1 then\
\009\009\009return fs.combine(\"/\",path)\
\009\009elseif tasks[currentTask].access <= 1 then\
\009\009\009return fs.combine(\"/System/Apps/\"..tasks[currentTask].path,path)\
\009\009end\
\009end\
\
\009shell.path = function()\
\009\009return oldPath\
\009end\
\
\009local securedEnv = {\
\009\009oldOpen = oldOpen,\
\009\009oldExist = oldExist,\
\009\009oldDel = oldDel,\
\009\009shell = shell,\
\009\009os = os,\
\009\009read = read,\
\009\009notifications = notifications,\
\009}\
\
  sleep(2)\
end\
\
os.getLog = function()\
\009return logBuffer\
end\
\
os.getErrorBuffer = function()\
\009return errorBuffer\
end\
\
os.clearErrorBuffer = function()\
\009errorBuffer = nil\
end\
\
local shellS = shell\
\
os.getEnvironment = function()\
\009local nShell = shellS\
\009local nFS = fs\
\009local nOS = os\
\009local nRead = read\
\009local nNotif = notifications\
\
\009local env = {\
\009\009[\"shell\"] = nShell,\
\009\009fs = nFS,\
\009\009os = nOS,\
\009\009read = nRead,\
\009\009notifications = nNotif,\
\009}\
\009return env\
end\
\
\
bootScreen()\
parallel.waitForAny(splash,boot)\
origin.setPaletteColor(colors.cyan, 0.29, 0.6, 0.69)\
\
term.redirect(origin)\
origin.setBackgroundColor(colors.black)\
origin.clear()\
\
\
\
os.changeApp = function(name)\
\009if type(name) == \"string\" then\
\009\009for i=1,#tasks do\
\009\009\009if tasks[i].path == name then\
\009\009\009\009name = i\
\009\009\009\009break\
\009\009\009end\
\009\009end\
\009end\
\
\009os.queueEvent(\"system.changeApp\", name)\
end\
\
local function changeApp(name)\
\009if stockPalette then\
\009\009tasks[currentTask].palette = {}\
\009\009for name, color in pairs(stockPalette) do\
\009\009\009tasks[currentTask].palette[name] = {}\
\009\009\009tasks[currentTask].palette[name][1], tasks[currentTask].palette[name][2], tasks[currentTask].palette[name][3] = tasks[currentTask].screen.getPaletteColor(colors[name])\
\009\009end\
\009end\
\009tasks[currentTask].screen.setVisible(false)\
\
\009if tasks[name] then\
\009\009currentTask = name\
\009\009printLog('Trying to change app to \"'..tasks[name].path..'\"')\
\009\009os.applyColorPalette(tasks[currentTask].palette, tasks[currentTask].screen)\
\
\009\009tasks[currentTask].screen.redraw()\
\009\009term.redirect(tasks[currentTask].screen)\
\009\009tasks[currentTask].error = coroutine.resume(tasks[currentTask].coroutine, \"resume\")\
\009\009os.applyColorPalette(tasks[currentTask].palette, tasks[currentTask].screen)\
\009end\
end\
\
os.closeApp = function(name)\
\009if type(name)==\"string\" then\
\009\009for i=1,#tasks do\
\009\009\009if tasks[i].path == name then\
\009\009\009\009name = i\
\009\009\009\009break\
\009\009\009end\
\009\009end\
\009end\
\
\009printLog('Trying to close app \"'..tasks[name].path..'\"')\
\009os.queueEvent(\"system.closeApp\", name)\
\009os.applyColorPalette(currentPalette)\
end\
\
local function closeApp(name)\
\009if name > 1 and tasks[name] then\
\009\009local appPath = tasks[name].path\
\
\009\009os.applyColorPalette(currentPalette)\
\009\009if tasks[name].screen then\
\009\009\009tasks[name].screen.setVisible(false)\
\009\009end\
\009\009tasks[name].screen = nil\
\
\009\009local i = 1\
\009\009while i <= #backgroundTasks do\
\009\009\009if backgroundTasks[i].parent == appPath then\
\009\009\009\009printLog('[bg:'..appPath..\"#\"..backgroundTasks[i].id..']'..' - Terminated')\
\009\009\009\009table.remove(backgroundTasks, i)\
\009\009\009else\
\009\009\009\009i = i+1\
\009\009\009end\
\009\009end\
\
\009\009table.remove(tasks, name)\
\009\009if currentTask >= name then\
\009\009\009currentTask = currentTask - 1\
\009\009end\
\009\009os.applyColorPalette(currentPalette)\
\009\009-- tasks[#tasks] = nil\
\
\009\009printLog('App \"'..appPath..'\" closed')\
\009else\
\009\009printLog('Error, app \"'..appPath..'\" not found or attempt to close Launcher')\
\009end\
end\
\
os.terminateBackgroundTask = function(id, parent)\
\009local parent = parent\
\009if not parent then\
\009\009parent = (tasks[currentTask] and tasks[currentTask].path) or \"system\"\
\009end\
\009if type(id) == \"string\" then\
\009\009for i=1,#backgroundTasks do\
\009\009\009if backgroundTasks[i].parent == parent and backgroundTasks[i].name == id then\
\009\009\009\009local bid = backgroundTasks[i].id\
\009\009\009\009table.remove(backgroundTasks, i)\
\009\009\009\009printLog('[bg:'..parent..\"#\"..bid..']'..' - Terminated')\
\009\009\009\009break\
\009\009\009end\
\009\009end\
\009elseif type(id) == \"number\" then\
\009\009for i=1,#backgroundTasks do\
\009\009\009if backgroundTasks[i].parent == parent and backgroundTasks[i].id == id then\
\009\009\009\009table.remove(backgroundTasks, i)\
\009\009\009\009printLog('[bg:'..parent..\"#\"..id..']'..' - Terminated')\
\009\009\009\009break\
\009\009\009end\
\009\009end\
\009end\
end\
\
os.newBackgroundTask = function(func, name, args)\
\009local parent\
\009local access\
\009local dname\
\009local func = func\
\009if tasks[currentTask] then\
\009\009parent = tasks[currentTask].path\
\009\009access = tasks[currentTask].access\
\009\009dname = name or (tasks[currentTask].path..\" process\")\
\009else\
\009\009parent = \"system\"\
\009\009access = 1\
\009\009dname = name or \"System process\"\
\009end\
\
\009printLog('Trying to create background task for \"'..parent..'\"')\
\
\009local finded = 0\
\009for i=1,#backgroundTasks do\
\009\009if backgroundTasks[i].parent == parent then\
\009\009\009finded = finded + 1\
\009\009end\
\009end\
\
\009local id = finded+1\
\
\009if type(func) == \"string\" then\
\009\009if oldExist(func) then\
\009\009\009local tEnv = os.getEnvironment()\
\009    setmetatable( tEnv, { __index = _G } )\
\009\009\009local newFn, err = loadfile(func, tEnv)\
\009\009\009if newFn then\
\009\009\009\009func = newFn\
\009\009\009else\
\009\009\009\009printLog('[bg:'..parent..\"#\"..id..']'..' - Error: '..err)\
\009\009\009\009return\
\009\009\009end\
\009\009else\
\009\009\009printLog('[bg:'..parent..\"#\"..id..']'..' - Unable to find background function')\
\009\009\009return\
\009\009end\
\009end\
\
\009if parent ~= \"system\" and finded > backgroundTasksPerApp then\
\009\009printLog('['..parent..']'..' - Number of allowed background tasks exceeded')\
\009\009return\
\009end\
\
\009printLog('['..parent..']'..' - Creating background task with access level: '..access)\
\
\009local bgid = #backgroundTasks+1\
\009backgroundTasks[bgid] = {\
\009\009parent = parent,\
\009\009access = access,\
\009\009id = id,\
\009\009name = dname,\
\009\009coroutine = coroutine.create(function()\
\009\009\009-- func(unpack(args or {}))\
\009\009\009local ok, err = pcall(func)\
\009\009\009if not ok then\
\009\009\009\009printLog('[bg:'..parent..\"#\"..id..']'..' - Error: '..err)\
\009\009\009end\
\009\009\009for i=1,#backgroundTasks do\
\009\009\009\009if backgroundTasks[i].parent == info.parent and backgroundTasks[i].id == info.id then\
\009\009\009\009\009table.remove(backgroundTasks, i)\
\009\009\009\009\009break\
\009\009\009\009end\
\009\009\009end\
\009\009\009printLog('[bg:'..parent..\"#\"..id..']'..' - Terminated')\
\009\009\009coroutine.yield()\
\009\009end)\
\009}\
end\
\
os.runApp = function(name, args)\
\009if not name then\
\009\009return nil\
\009end\
\
\009local findApp\
\009local path\
\009local name = name\
\
\009printLog('Trying to run app \"'..name..'\"')\
\009if oldExist(\"User/Apps/\"..name) and oldDir(\"/User/Apps/\"..name) then\
\009\009findApp = 2\
\009\009path = \"/User/Apps/\"..name..\"/Start.x\"\
\009elseif oldExist(\"/System/Apps/\"..name) and oldDir(\"/System/Apps/\"..name) then\
\009\009findApp = 1\
\009\009path = \"/System/Apps/\"..name..\"/Start.x\"\
\009else\
\009\009printLog('['..name..']'..' - App not found')\
\009end\
\
\009for i=1,#tasks do\
\009\009if tasks[i].path == name then\
\009\009\009printLog('App \"'..name..'\" already running')\
\009\009\009os.changeApp(i)\
\009\009\009return nil\
\009\009end\
\009end\
\
\009printLog('['..name..']'..' - Access level: '..findApp)\
\009os.queueEvent(\"system.runApp\", {path = path, access = findApp, name = name}, args)\
end\
\
local function runApp(info, args)\
\009local error\
\009local path = info.path\
\009local findApp = info.access\
\009local name = info.name\
\
\009if findApp ~= nil then\
\009\009local function run()\
\009\009\009if not args then\
\009\009\009\009args = {}\
\009\009\009end\
\009\009\009term.redirect(tasks[currentTask].screen)\
\009\009\009tasks[currentTask].palette = currentPalette\
\
\009\009\009local taskNum = currentTask\
\009\009\009os.applyColorPalette(currentPalette, tasks[currentTask].screen)\
\
\009\009\009local env = os.getEnvironment()\
\009\009\009printLog('['..name..']'..\" - Trying to execute main file\")\
\009\009\009error = os.run(env, path, unpack(args))\
\
\009\009\009if error then\
\009\009\009\009printLog('Error in app \"'..name..'\": '..error)\
\009\009\009\009errorBuffer = {app = name, error = error}\
\009\009\009end\
\009\009\009printLog('App \"'..name..'\" had been terminated')\
\009\009\009for i=1,#tasks do\
\009\009\009\009if tasks[i].path == path then\
\009\009\009\009\009os.closeApp(i)\
\009\009\009\009\009break\
\009\009\009\009end\
\009\009\009end\
\009\009\009coroutine.yield()\
\009\009end\
\
\009\009local info = os.getAppInfo(name)\
\
\009\009tasks[#tasks+1] = {}\
\009\009currentTask = #tasks\
\009\009tasks[currentTask].name = info.name\
\009\009tasks[currentTask].path = name\
\
\009\009tasks[currentTask].screen = window.create(first, appPosX, appPosY, appSizeX, appSizeY)\
\
\009\009term.redirect(tasks[currentTask].screen)\
\009\009tasks[currentTask].coroutine = coroutine.create(run)\
\
\009\009tasks[currentTask].access = findApp\
\009\009tasks[currentTask].running = true\
\009\009term.redirect(tasks[currentTask].screen)\
\009\009tasks[currentTask].error = coroutine.resume(tasks[currentTask].coroutine, \"resume\")\
\009\009tasks[currentTask].running = nil\
\009\009if tasks[currentTask].coroutine and not error then\
\009\009\009printLog('['..name..']'..\" - Success\")\
\009\009\009term.redirect(tasks[currentTask].screen)\
\009\009\009if not tasks[currentTask].style then\
\009\009\009\009tasks[currentTask].style = term.getBackgroundColor()\
\009\009\009end\
\009\009\009tasks[currentTask].access = findApp\
\009\009end\
\009\009os.applyColorPalette(currentPalette, tasks[currentTask].screen)\
\009else\
\009\009printLog(\"Can't \"..'find app \"'..name..'\"')\
\009end\
end\
\
local function resetAppCursor()\
\009if tasks[currentTask] and tasks[currentTask].screen then\
\009\009local _x, _y\
\009\009local txColor, bgColor\
\
\009\009_x, _y = tasks[currentTask].screen.getCursorPos()\
\009\009txColor, bgColor = tasks[currentTask].screen.getTextColor(), tasks[currentTask].screen.getBackgroundColor()\
\
\009\009if _x and _y then\
\009\009\009origin.setCursorPos(_x, _y)\
\009\009\009origin.setTextColor(txColor)\
\009\009\009origin.setBackgroundColor(bgColor)\
\009\009end\
\009end\
end\
\
local function input()\
\009local event, side, x, y, z\
\
\009while true do\
\009\009currentRunningTask = nil\
\009\009press_mod = nil\
\009\009term.redirect(origin)\
\009\009event, side, x, y, z = os.pullEvent()\
\
\009\009for i=1,#backgroundTasks do\
\009\009\009if backgroundTasks[i] and backgroundTasks[i].coroutine then\
\009\009\009\009currentRunningBackTask = i\
\009\009\009\009coroutine.resume(backgroundTasks[i].coroutine, event, side, x, y, z)\
\009\009\009end\
\009\009end\
\009\009currentRunningBackTask = nil\
\
\009\009if event == \"system.closeApp\" then\
\009\009\009if side ~= \"System UI\" and side > 1 then\
\009\009\009\009closeApp(side)\
\009\009\009\009term.redirect(origin)\
\009\009\009\009ui_state = coroutine.resume(ui_routine, event, side, x, y, z)\
\009\009\009end\
\009\009elseif event == \"system.runApp\" then\
\009\009\009runApp(side, x)\
\009\009\009term.redirect(origin)\
\009\009\009ui_state = coroutine.resume(ui_routine, event, side, x, y, z)\
\009\009elseif event == \"system.changeApp\" then\
\009\009\009changeApp(side)\
\009\009\009term.redirect(origin)\
\009\009\009ui_state = coroutine.resume(ui_routine, event, side, x, y, z)\
\009\009elseif event == \"system.sendNotification\" then\
\009\009\009term.redirect(origin)\
\009\009\009ui_state = coroutine.resume(ui_routine, event, side, x, y, z)\
\009\009elseif event == \"system.removeNotification\" then\
\009\009\009term.redirect(origin)\
\009\009\009ui_state = coroutine.resume(ui_routine, event, side, x, y, z)\
\009\009elseif event == \"system.clearNotifications\" then\
\009\009\009term.redirect(origin)\
\009\009\009ui_state = coroutine.resume(ui_routine, event, side, x, y, z)\
\009\009elseif event == \"system.newBackgroundTask\" then\
\009\009\009term.redirect(origin)\
\009\009\009ui_state = coroutine.resume(ui_routine, event, side, x, y, z)\
\009\009else\
\009\009\009term.redirect(origin)\
\009\009\009ui_state, press_mod = coroutine.resume(ui_routine, event, side, x, y, z)\
\009\009\009if ui_state and not did_mod and not press_mod and tasks[currentTask] and tasks[currentTask].screen then\
\009\009\009\009currentRunningTask = currentTask\
\009\009\009\009tasks[currentTask].screen.setVisible(true)\
\009\009\009\009term.redirect(tasks[currentTask].screen)\
\009\009\009\009coroutine.resume(tasks[currentTask].coroutine, event, side, x, y, z)\
\009\009\009\009resetAppCursor()\
\009\009\009end\
\009\009end\
\009end\
end\
\
local function updateApps()\
  while allowBarDrawing do\
\009\009currentRunningTask = nil\
\009\009currentRunningBackTask = nil\
\
\009\009for i=1,#backgroundTasks do\
\009\009\009if backgroundTasks[i] and backgroundTasks[i].coroutine then\
\009\009\009\009currentRunningBackTask = i\
\009\009\009\009coroutine.resume(backgroundTasks[i].coroutine)\
\009\009\009\009-- local status = coroutine.status(backgroundTasks[i].coroutine)\
\009\009\009\009-- printLog(\"[Background] - \"..status)\
\009\009\009\009-- coroutine.yield()\
\009\009\009\009-- sleep(delay)\
\009\009\009end\
\009\009end\
\009\009currentRunningBackTask = nil\
\
\009\009term.redirect(origin)\
\009\009ui_state = coroutine.resume(ui_routine, \"resume\")\
\009\009-- sleep(delay)\
\009\009if ui_state and not did_mod and tasks[currentTask] and tasks[currentTask].screen then\
\009\009\009currentRunningTask = currentTask\
\009\009\009if tasks[currentTask].coroutine and coroutine.status(tasks[currentTask].coroutine) ~= \"dead\" then\
\009\009\009\009tasks[currentTask].screen.setVisible(true)\
\009\009\009\009term.redirect(tasks[currentTask].screen)\
\009\009\009\009coroutine.resume(tasks[currentTask].coroutine, \"resume\")\
\009\009\009else\
\009\009\009\009os.closeApp(currentTask)\
\009\009\009end\
\009\009end\
\009\009resetAppCursor()\
    sleep(delay)\
  end\
end\
\
ui_routine = coroutine.create(function()\
\009local path\
\009if oldExist(\"/User/Apps/\"..defaultUI) then\
\009\009path = \"/User/Apps/\"..defaultUI\
\009elseif oldExist(\"/System/Apps/\"..defaultUI) then\
\009\009path = \"/System/Apps/\"..defaultUI\
\009else\
\009\009printLog(\"Cant't boot. Unable to find System UI app\")\
\009\009errorBuffer = {app = \"System UI\", error = \"Unable to find System UI app\"}\
\009\009os.queueEvent(\"system.closeApp\", \"System UI\")\
\009end\
\009local err = os.run({setDidState = function(state) did_mod = state end}, path..\"/Start.x\")\
\009if err then\
\009\009if err then\
\009\009\009printLog('Error in app System UI: '..err)\
\009\009\009errorBuffer = {app = \"System UI\", error = err}\
\009\009\009os.queueEvent(\"system.closeApp\", \"System UI\")\
\009\009end\
\009\009printLog(\"System UI had been terminated\")\
\009end\
end)\
\
printLog(\"Trying to run System UI\")\
ui_state, appPosX, appPosY, appSizeX, appSizeY = coroutine.resume(ui_routine)\
appPosX, appPosY, appSizeX, appSizeY = appPosX or 1, appPosY or 1, appSizeX or xSize, appSizeY or ySize\
os.runApp(defaultLauncher)\
\
parallel.waitForAny(input,updateApps)",
    path = "System/Core.x",
  },
  {
    text = "f37o37r37 07i87=87######################################################\
 b7t07e07r07m07.07######################################################\
 07x07 07=07 07i07######################################################\
e37n37d37 07 07 07######################################################\
########################################################################\
########################################################################\
########################################################################\
########################################################################\
########################################################################\
########################################################################\
########################################################################\
########################################################################",
    path = "System/Media/Images/code_icon.png",
  },
  {
    text = "\14970 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70\14907\
\13807\14307\14307\14307\14307\14307\14307\14307\14307\14307\14307\14307\14307\14307\14307\14307\14307\14307\14307\14307\14307\14307\14307\14307\14307\14307\14307\13307",
    path = "System/Media/Images/dialog_bottom.png",
  },
  {
    text = "\14970 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70\14907",
    path = "System/Media/Images/dialog_middle.png",
  },
  {
    text = " 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07\
 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07\
\14970 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70\14907",
    path = "System/Media/Images/dialog_top.png",
  },
  {
    text = " 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\
 1f>1f_1f 1f 1f 0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00######\
 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00#########\
 0f 0f 0f 0f 0f 0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00#########\
 00 0f 0f 00 0f 0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00#########\
 00 0f 0f 00 0f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00############\
### 0f 0f 00###### 00 00 00 00 00 00 00 00 00 00 00 00 00###############\
 00 00 00######### 00 00 00 00 00 00 00 00 00 00 00 00 00###############\
################################################### 00##################\
########################################################################\
########################################################################\
########################################################################",
    path = "System/Media/Images/exec_icon.png",
  },
  {
    text = "\12800\12800\12800\15108\14880\12800\12800\12800\12800\12800\12800\12800\12800####################################\
\12800\12800\12800\14908\14980\12800\12800\12800\12800\12800\12800\12800\12800####################################\
\12800\12800\12800\14908\14980\12800\12800\12800\12800\12800\12800\12800\12800####################################\
\12800\13680\13908\14908\14980\13508\13280\12800\12800\12800\12800\12800\12800####################################\
\12800\12800\13080\14408\15980\12980\12800\12800\12800\12800\12800\12800\12800####################################\
\12800\14080\14080\14080\14080\14080\14080\12800\12800\12800\12800\12800\12800####################################\
###########################################################################\
###########################################################################\
###########################################################################\
###########################################################################\
###########################################################################\
###########################################################################\
###################################################\
###################################################\
###################################################\
###################################################\
###################################################\
###################################################",
    path = "System/Media/Images/load_icon.png",
  },
  {
    text = "\12790\12790\12790\12790\12790\12790\
 90\14090\14090\14090\14090 90\
 90i90c90o90n90 90\
\12790\12790\12790\12790\12790\12790",
    path = "System/Media/Images/noicon.png",
  },
  {
    text = "{\
  name = \"Default\",\
\
  newColors = {\
    white = {0.94, 0.94, 0.94},\
    orange = {0.949, 0.698, 0.2},\
    magenta = {0.9, 0.5, 0.85},\
    lightBlue = {0.6,0.7,0.95},\
    yellow = {0.87,0.87,0.42},\
    lime = {0.5,0.8,0.1},\
    pink = {0.95,0.7,0.8},\
    gray = {0.3,0.3,0.3},\
    lightGray = {0.6,0.6,0.6},\
    cyan = {0.3,0.6,0.7},\
    purple = {0.7,0.4,0.9},\
    blue = {0.2,0.4,0.8},\
    brown = {0.5,0.4,0.3},\
    green = {0.34,0.65,0.31},\
    red = {0.8,0.3,0.3},\
    black = {0.1,0.1,0.1},\
  }\
}",
    path = "System/Media/ScreenSettings/1.info",
  },
  {
    text = "{\
  name = \"Legacy\",\
\
  newColors = {\
    white     = {1, 1, 1},\
    orange    = {1, 0.64, 0.21},\
    magenta   = {0.91, 0.42, 0.95},\
    lightBlue = {0.31, 0.75, 0.93},\
    yellow    = {0.97, 0.92, 0.34},\
    lime      = {0.38, 0.98, 0.39},\
    pink      = {0.96, 0.79, 0.8},\
    gray      = {0.35, 0.35, 0.35},\
    lightGray = {0.74, 0.74, 0.74},\
    cyan      = {0.24,0.75,0.77},\
    purple    = {0.58, 0.47, 0.96},\
    blue      = {0.17, 0.39, 0.88},\
    brown     = {0.5, 0.34, 0.16},\
    green     = {0.15, 0.77, 0.29},\
    red       = {0.94, 0.19, 0.2},\
    black     = {0, 0, 0},\
  }\
}",
    path = "System/Media/ScreenSettings/Advanced.info",
  },
  {
    text = "{\
  name = \"Shades of gray\",\
\
  newColors = {\
    white     = {1, 1, 1},\
    orange    = {0.932, 0.932, 0.932},\
    magenta   = {0.865, 0.865, 0.865},\
    lightBlue = {0.799, 0.799, 0.799},\
    yellow    = {0.732, 0.732, 0.732},\
    lime      = {0.666, 0.666, 0.666},\
    pink      = {0.599, 0.599, 0.599},\
    gray      = {0.532, 0.532, 0.532},\
    lightGray = {0.466, 0.466, 0.466},\
    cyan      = {0.399, 0.399, 0.399},\
    purple    = {0.333, 0.333, 0.333},\
    blue      = {0.266, 0.266, 0.266},\
    brown     = {0.199, 0.199, 0.199},\
    green     = {0.133, 0.133, 0.133},\
    red       = {0.066, 0.066, 0.066},\
    black     = {0, 0, 0},\
  }\
}",
    path = "System/Media/ScreenSettings/ShadesOfGray.info",
  },
  {
    text = "{\
  name = \"True white & black\",\
\
  newColors = {\
    white = {1, 1, 1},\
    black = {0, 0, 0},\
  }\
}",
    path = "System/Media/ScreenSettings/TrueWhiteBlack.info",
  },
  {
    text = "local xSize, ySize = term.getSize()\
local centerX = math.floor(xSize/2)\
local centerY = math.floor(ySize/2)\
local origin = term.native()\
\
local clear = function(color)\
\009term.setBackgroundColor(color)\
\009term.clear()\
\009term.setCursorPos(1,1)\
end\
\
local text = function(string,xPos,yPos,trm)\
\009if not trm then\
\009\009trm = term\
\009end\
\009trm.setCursorPos(xPos,yPos)\
\009trm.write(string)\
end\
\
function init()\
  term.redirect(term.native())\
  clear(colors.white)\
  term.setTextColor(colors.cyan)\
  text(\"Legacy\",centerX-2,centerY)\
end\
\
function loop()\
  origin.setPaletteColor(colors.cyan, 0.97, 0.97, 0.97) -- 1\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.92, 0.96, 0.96) -- 2\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.85, 0.92, 0.94) -- 3\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.78, 0.87, 0.9) -- 4\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.72, 0.83, 0.87) -- 5\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.65, 0.8, 0.85) -- 6\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.58, 0.76, 0.81) -- 7\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.5, 0.72, 0.78) -- 8\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.43, 0.67, 0.76) -- 9\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.36, 0.63, 0.72) -- 10\
  sleep(0.1)\
\
  origin.setPaletteColor(colors.cyan, 0.29, 0.6, 0.69) -- original\
  sleep(0.3)\
\
  origin.setPaletteColor(colors.cyan, 0.36, 0.63, 0.72) -- 10\
  sleep(0.1)\
\
  origin.setPaletteColor(colors.cyan, 0.43, 0.67, 0.76) -- 9\
  sleep(0.1)\
\
  origin.setPaletteColor(colors.cyan, 0.5, 0.72, 0.78) -- 8\
  sleep(0.1)\
\
  origin.setPaletteColor(colors.cyan, 0.58, 0.76, 0.81) -- 7\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.65, 0.8, 0.85) -- 6\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.72, 0.83, 0.87) -- 5\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.78, 0.87, 0.9) -- 4\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.85, 0.92, 0.94) -- 3\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.92, 0.96, 0.96) -- 2\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.97, 0.97, 0.97) -- 1\
  sleep(0)\
end",
    path = "System/Media/bootanimation.lua",
  },
  {
    text = "local xSize, ySize = term.getSize()\
local centerX = math.floor(xSize/2)\
local centerY = math.floor(ySize/2)\
local origin = term.native()\
\
local clear = function(color)\
\009term.setBackgroundColor(color)\
\009term.clear()\
\009term.setCursorPos(1,1)\
end\
\
local text = function(string,xPos,yPos,trm)\
\009if not trm then\
\009\009trm = term\
\009end\
\009trm.setCursorPos(xPos,yPos)\
\009trm.write(string)\
end\
\
function init()\
  term.redirect(term.native())\
  clear(colors.white)\
  term.setTextColor(colors.cyan)\
  text(\"Legacy\",centerX-2,centerY)\
end\
\
function loop()\
  origin.setPaletteColor(colors.cyan, 0.97, 0.97, 0.97) -- 1\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.85, 0.92, 0.94) -- 3\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.72, 0.83, 0.87) -- 5\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.58, 0.76, 0.81) -- 7\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.43, 0.67, 0.76) -- 9\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.29, 0.6, 0.69) -- original\
  sleep(0.3)\
\
  origin.setPaletteColor(colors.cyan, 0.36, 0.63, 0.72) -- 10\
  sleep(0.1)\
\
  origin.setPaletteColor(colors.cyan, 0.43, 0.67, 0.76) -- 9\
  sleep(0.1)\
\
  origin.setPaletteColor(colors.cyan, 0.5, 0.72, 0.78) -- 8\
  sleep(0.1)\
\
  origin.setPaletteColor(colors.cyan, 0.58, 0.76, 0.81) -- 7\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.72, 0.83, 0.87) -- 5\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.78, 0.87, 0.9) -- 4\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.85, 0.92, 0.94) -- 3\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.97, 0.97, 0.97) -- 1\
  sleep(0.3)\
\
  term.redirect(term.native())\
  clear(colors.white)\
  text(\"| ^ - ^ |\",centerX-4,centerY)\
\
  origin.setPaletteColor(colors.cyan, 0.97, 0.97, 0.97) -- 1\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.85, 0.92, 0.94) -- 3\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.72, 0.83, 0.87) -- 5\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.58, 0.76, 0.81) -- 7\
  sleep(0.1)\
\
  origin.setPaletteColor(colors.cyan, 0.58, 0.76, 0.81) -- 7\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.72, 0.83, 0.87) -- 5\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.85, 0.92, 0.94) -- 3\
  sleep(0)\
\
  origin.setPaletteColor(colors.cyan, 0.97, 0.97, 0.97) -- 1\
  sleep(0.3)\
end",
    path = "System/Media/shutanimation.lua",
  },
  {
    text = "local args = {...}\
\
if args[1] == \"changeName\" then\
  term.write(\"Password: \")\
  local name = \"\"\
  local pass = read(\"*\")\
  if os.verifyAccaunt(pass) then\
    term.write(\"New name: \")\
    name = read()\
    print(\"\")\
    local change = os.changeName(pass,name)\
    if change then\
      term.setTextColor(colors.green)\
      print(\"Done\")\
    else\
      term.setTextColor(colors.red)\
      print(\"Error\")\
    end\
  else\
    term.setTextColor(colors.red)\
    print(\"Incorrect password\")\
  end\
  sleep(0.5)\
end",
    path = "System/Scripts/account.lua",
  },
  {
    text = "local args = {...}\
print(\"System image creator\")\
\
local check = 1\
local final_path = \"#tmp/sysimage.info\"\
\
local function backup(chto,vochto)\
  print(\"Creating system image in \"..vochto)\
\
  local Massiv2 = {}\
  local function FileList(path)\
    local Massiv = fs.list(path)\
    print(path)\
    if #Massiv==0 then\
      local Massiv2Id = #Massiv2 + 1\
      Massiv2[Massiv2Id] = {}\
      Massiv2[Massiv2Id][\"path\"] = path\
    else\
      if check == 0 then\
        for i=1,#Massiv do\
          if fs.isDir(fs.combine(path, Massiv[i])) and (fs.combine(path, Massiv[i]) == \"Temp\" or fs.combine(path, Massiv[i]) == \"User/APIs\" or fs.combine(path, Massiv[i]) == \"User/Apps\" or fs.combine(path, Massiv[i]) == \"User/Storage\") then\
            local Massiv2Id = #Massiv2 + 1\
            Massiv2[Massiv2Id] = {}\
            Massiv2[Massiv2Id][\"path\"] = fs.combine(path, Massiv[i])\
          elseif fs.isDir(fs.combine(path, Massiv[i])) and fs.combine(path, Massiv[i]) ~= \"rom\" then\
            FileList(fs.combine(path, Massiv[i]))\
          elseif not fs.isDir(fs.combine(path, Massiv[i])) and fs.combine(path, Massiv[i]) ~= final_path then\
            local Massiv2Id = #Massiv2 + 1\
            Massiv2[Massiv2Id] = {}\
            Massiv2[Massiv2Id][\"path\"] = fs.combine(path, Massiv[i])\
            local file = fs.open(fs.combine(path, Massiv[i]),\"r\")\
            Massiv2[Massiv2Id][\"text\"] = file.readAll()\
            file.close()\
          end\
        end\
      elseif check == 1 then\
        for i=1,#Massiv do\
          if fs.isDir(fs.combine(path, Massiv[i])) and fs.combine(path, Massiv[i]) == \"Temp\" then\
            local Massiv2Id = #Massiv2 + 1\
            Massiv2[Massiv2Id] = {}\
            Massiv2[Massiv2Id][\"path\"] = fs.combine(path, Massiv[i])\
          elseif fs.isDir(fs.combine(path, Massiv[i])) and fs.combine(path, Massiv[i]) ~= \"rom\"then\
            FileList(fs.combine(path, Massiv[i]))\
          elseif not fs.isDir(fs.combine(path, Massiv[i])) and fs.combine(path, Massiv[i]) ~= final_path then\
            local Massiv2Id = #Massiv2 + 1\
            Massiv2[Massiv2Id] = {}\
            Massiv2[Massiv2Id][\"path\"] = fs.combine(path, Massiv[i])\
            local file = fs.open(fs.combine(path, Massiv[i]),\"r\")\
            Massiv2[Massiv2Id][\"text\"] = file.readAll()\
            file.close()\
          end\
        end\
      end\
    end\
  end\
\
  FileList(chto)\
  file=fs.open(vochto,\"w\")\
  file.write(textutils.serialise(Massiv2))\
  file.close()\
  return Massiv2\
end\
\
if args then\
\009for i=1,#args do\
\009\009if args[i] == '--system-only' or args[i] == '-s' then\
\009\009\009check = 0\
    elseif args[i] == '--all-data' or args[i] == '-a' then\
\009\009\009check = 1\
    else\
      final_path = args[i]\
\009\009end\
\009end\
\
  backup(\"/\", final_path)\
else\
  print(\" Arguments: --system-only (-s), --all-data (-a)\")\
  print(\" Usage: <output path> [arguments]\")\
end",
    path = "System/Scripts/createSystemImage.lua",
  },
  {
    text = "local logBuffer = os.getLog()\
local startFrom = 1\
if #logBuffer > 100 then\
  startFrom = #logBuffer-99\
end\
\
term.setTextColor(colors.white)\
print(\"Log output:\")\
print(\"\")\
\
for i=startFrom, #logBuffer do\
  term.setTextColor(colors.white)\
  term.write(\"[\"..i..\"] \")\
  term.setTextColor(logBuffer[i].color or colors.white)\
  print(logBuffer[i].text)\
end",
    path = "System/Scripts/dmesg.lua",
  },
  {
    text = "local args = {...}\
\
local path = place()\
local canRun = true\
\
local function getType(txt)\
  local i = #txt\
  while string.sub(txt,i,i) ~= \".\" and i > 0 do\
    i=i-1\
  end\
  if i > 0 then\
    txt = string.sub(txt,i+1)\
    return txt\
  else\
    return \"nope#\"\
  end\
end\
\
if args[1] then\
  if string.sub(args[1],1,1) == \"/\" then\
    path = args[1]\
  elseif string.sub(args[1],1,2) == \"..\" then\
    local i = #path\
    while string.sub(path,i,i) ~= \"/\" and i > 0 do\
      i=i-1\
    end\
    if i > 1 then\
      path = string.sub(path,0,i)\
    else\
      path = \"/\"\
    end\
    args[1] = string.sub(args[1],3)\
    path = fs.combine(path,args[1])\
  else\
    path = fs.combine(path,args[1])\
  end\
\
  if not fs.exists(path) then\
    term.setTextColor(colors.red)\
    print(\"Can't find \"..path)\
    canRun = false\
  elseif fs.exists(path) and not fs.isDir(path) then\
    term.setTextColor(colors.red)\
    print(path..\" not a directory\")\
    canRun = false\
  end\
end\
\
if canRun then\
  local list = os.sort(fs.list(path))\
  local sort = {}\
  sort.dir = {}\
  local sortWords = {}\
\
  for i=1,#list do\
    if fs.isDir(fs.combine(path,list[i])) then\
      --term.setTextColor(colors.cyan)\
      sort.dir[#sort.dir+1] = list[i]\
    else\
      --term.setTextColor(colors.white)\
      local type = getType(list[i])\
      if not sort[type] then\
        sort[type] = {}\
      end\
      sort[type][#sort[type]+1] = list[i]\
      local find = false\
      for i=1,#sortWords do\
        if sortWords[i] == type then\
          find = true\
          break\
        end\
      end\
      if not find then\
        sortWords[#sortWords+1] = type\
      end\
    end\
    --print(list[i])\
  end\
\
  sortWords = os.sort(sortWords)\
  sort.dir = os.sort(sort.dir)\
\
  for i=1,#sortWords do\
    sort[sortWords[i]] = os.sort(sort[sortWords[i]])\
  end\
\
  term.setTextColor(colors.cyan)\
  for i=1,#sort.dir do\
    print(sort.dir[i])\
  end\
\
  for i=1,#sortWords do\
    if sortWords[i] == \"x\" or sortWords[i] == \"lua\" or sortWords[i] == \"exe\" or sortWords[i] == \"sh\" then\
      term.setTextColor(colors.orange)\
    elseif sortWords[i] == \"txt\" or sortWords[i] == \"info\" or sortWords[i] == \"cfg\" or sortWords[i] == \"m\" or sortWords[i] == \"ini\" or sortWords[i] == \"inf\" then\
      term.setTextColor(colors.yellow)\
    elseif sortWords[i] == \"png\" or sortWords[i] == \"skch\" or sortWords[i] == \"nfp\" or sortWords[i] == \"nft\" or sortWords[i] == \"ico\" then\
      term.setTextColor(colors.lightBlue)\
    elseif sortWords[i] == \"mp3\" or sortWords[i] == \"wav\" or sortWords[i] == \"ogg\" or sortWords[i] == \"flac\" or sortWords[i] == \"sspro\" then\
      term.setTextColor(colors.brown)\
    else\
      term.setTextColor(colors.white)\
    end\
\
    for j=1,#sort[sortWords[i]] do\
      print(sort[sortWords[i]][j])\
    end\
  end\
\
end",
    path = "System/Scripts/ls.lua",
  },
  {
    text = "local args = {...}\
\
if args[1] then\
  os.runApp(\"PacketManager\", args)\
else\
  local info = os.getAppInfo(\"PacketManager\")\
  if info then\
    print(\" \")\
    print(info.name..\" version: \"..info.version)\
    print(\" \")\
    print(\"Arguments:\")\
    print(\" install <path>\")\
    print(\" remove <packet name>\")\
    print(\" create <project folder> <output folder> <packet name>\")\
    print(\" \")\
  else\
    print(\"Packet Manager not installed\")\
  end\
end",
    path = "System/Scripts/pcm.lua",
  },
  {
    text = "local args = {...}\
\
if args[1] then\
  if fs.exists(args[1]) then\
    if args[1]:sub(1,6) == \"System\" or args[1]:sub(1,7) == \"/System\" or args[1]:sub(1,8) == \"//System\" then\
      print(\" This action may cause system failure. Are you sure you want to proceed?\")\
      term.write(\"[y/N]: \")\
      local ans = read()\
      if ans ~= \"y\" and ans ~= \"Y\" then\
        print(\" \")\
        print(\" \")\
        return nil\
      end\
    end\
    fs.delete(args[1])\
    print(args[1]..\" deleted\")\
    print(\" \")\
  else\
    print(\"No such file or directory\")\
  end\
else\
  print(\"Usage: rm <path>\")\
end",
    path = "System/Scripts/rm.lua",
  },
  {
    text = "local args = {...}\
\
if args[1] then\
  local app = args[1]\
  for i=1, #args do\
    args[i] = args[i+1]\
  end\
  os.runApp(app, args)\
else\
  print(\"Usage: run <app name> [argument1] [argument2] ...\")\
end",
    path = "System/Scripts/run.lua",
  },
  {
    text = "local delay = 60 * 30\
local longMult = 2\
local currentOS = os.getOSinfo()\
local lastInfo\
os.printLog(\"Running\", \"bg:UpdateService\")\
\
local runSettings = function()\
  os.runApp(\"Settings\", {\"updates\"})\
end\
\
local sent = false\
while true do\
  if not sent then\
    os.printLog(\"Downloading last verion info\", \"bg:UpdateService\")\
    http.request(\"https://pastebin.com/raw/e59XLpie\")\
    sent = true\
  else\
    local event, url, text = os.pullEvent()\
    if event == \"http_success\" then\
      os.printLog(\"Checking updates\", \"bg:UpdateService\")\
      if text then\
        local lastInfo = text.readAll()\
        text.close()\
        if lastInfo then\
          lastInfo = textutils.unserialize(lastInfo)\
          if currentOS.OSversion < lastInfo.OSversion then\
            os.printLog(\"New verion of OS available \", \"bg:UpdateService\")\
            os.sendNotification(string.char(25), \"OS update\", \"Cur ver: \"..currentOS.OSversion, \"Last ver: \"..lastInfo.OSversion, runSettings)\
          else\
            os.printLog(\"No updates available\", \"bg:UpdateService\")\
          end\
        else\
          os.printLog(\"Reading info error\", \"bg:UpdateService\")\
        end\
      else\
        os.printLog(\"Unable to connect to the Internet\", \"bg:UpdateService\")\
      end\
      sleep(delay)\
      sent = false\
    elseif event == \"http_failure\" then\
      os.printLog(\"Unable to connect to the Internet\", \"bg:UpdateService\")\
      sleep(delay * longMult)\
      sent = false\
    end\
  end\
end",
    path = "System/Scripts/update_checker.lua",
  },
  {
    path = "Temp",
  },
  {
    path = "User/APIs",
  },
  {
    path = "User/Apps",
  },
  {
    path = "User/Storage",
  },
  {
    text = "settings.set(\"shell.allow_disk_startup\", false)\
settings.save(\".settings\")\
\
local accent_color = colors.cyan\
local text_color = colors.lightGray\
local text_color_alt = colors.gray\
local background_color = colors.white\
\
local waitFor = 5\
local version = \"0.2.2\"\
\
local name = \"Legacy\"\
\
\
term.setBackgroundColor(background_color)\
\
term.clear()\
term.setCursorPos(1,1)\
term.setTextColor(accent_color)\
term.write(name)\
term.setTextColor(text_color)\
term.write(' bootloader ')\
print('v'..version)\
term.setTextColor(text_color)\
print()\
print('Boot from:')\
\
local xSize, ySize = term.getSize()\
local bootFrom = 1\
local drives = {}\
local label = os.getComputerLabel()\
local boot = false\
local key = false\
\
if not label then label = 'nil' end\
\
function os.run( _tEnv, _sPath, ... )\
    local tArgs = { ... }\
    local tEnv = _tEnv\
    setmetatable( tEnv, { __index = _G } )\
    local fnFile, err = loadfile( _sPath, tEnv )\
    if fnFile then\
        local ok, err = pcall( function()\
            fnFile( table.unpack( tArgs ) )\
        end )\
        if not ok then\
            if err and err ~= \"\" then\
                printError( err )\
            end\
            return err\
        end\
        return nil\
    end\
    if err and err ~= \"\" then\
        printError( err )\
    end\
    return err\
end\
\
if settings.get(\"boot.addNewItem\") then\
  drives[#drives+1] = settings.get(\"boot.addNewItem\")\
  settings.unset(\"boot.addNewItem\")\
  settings.save(\".settings\")\
end\
\
drives[#drives+1] = {}\
if fs.exists(\"/System/Build.info\") then\
  local osinfo = fs.open(\"/System/Build.info\", \"r\")\
  osinfo = textutils.unserialize(osinfo.readAll())\
  drives[#drives] = {name = osinfo.name..\" \"..osinfo.build..\" \"..label, path = osinfo.core_path, args = ''}\
elseif fs.exists('/System/Core.x') then\
  drives[#drives] = {name = \"Unknown Legacy family OS \"..label, path = '/System/Core.x', args = ''}\
elseif fs.exists('/launcher') then\
  drives[#drives] = {name = \"VedroidOS \"..label, path = '/launcher', args = ''}\
else\
  drives[#drives] = {name = \"HDD Shell \"..label, path = '', args = ''}\
end\
\
local fileList = fs.list('/')\
\
for i=1,#fileList do\
\009if fs.isDir(fileList[i]) and fs.getDrive(fileList[i]) and fs.getDrive(fileList[i]) ~= 'hdd' and string.sub(fileList[i],1,4) == 'disk' then\
\009\009local find = false\
\009\009local files = fs.list(fileList[i])\
\009\009local point = ''\
\009\009for ii=1,#files do\
\009\009\009if not fs.isDir(files[ii]) and (files[ii] == 'startup' or files[ii] == 'startup.lua') then\
\009\009\009\009point = fileList[i]..'/'..files[ii]\
\009\009\009\009find = true\
\009\009\009\009break\
\009\009\009elseif fs.isDir(files[ii]) and files[ii] == 'startup' and (fs.exists(files[ii]..'/startup') or fs.exists(files[ii]..'/startup.lua')) then\
\009\009\009\009point = fileList[i]..'/'..files[ii]..'/startup'\
\009\009\009\009find = true\
\009\009\009\009break\
\009\009\009end\
\009\009end\
\009\009if find then\
\009\009\009local dlabel = disk.getLabel(fs.getDrive(fileList[i]))\
\009\009\009if not dlabel then\
\009\009\009\009dlabel = 'nil'\
\009\009\009end\
\009\009\009drives[#drives+1] = {}\
\009\009\009drives[#drives]['name'] = fs.getDrive(fileList[i])..' drive '..dlabel\
\009\009\009drives[#drives]['path'] = point\
\009\009\009drives[#drives]['args'] = ''\
\009\009end\
\009end\
end\
\
local function drawDrives()\
\009term.setCursorPos(1,5)\
\009for i=1,#drives do\
\009\009term.setTextColor(text_color_alt)\
\009\009if i == bootFrom then\
\009\009\009term.setTextColor(accent_color)\
\009\009end\
\009\009print(i..' '..drives[i]['name'])\
\009end\
\009term.setTextColor(text_color)\
\009print()\
end\
\
drawDrives()\
print('Press \"e\" for configure')\
print('Press \"Enter\" for boot')\
\
local pullEvent = function()\
\009local event, side, x, y = os.pullEventRaw()\
\009if event ~= \"terminate\" then\
\009\009return event, side, x, y\
\009else\
\009\009os.shutdown()\
\009end\
end\
\
local function strToTable(str)\
  local tbl = {}\
  local wrd = \"\"\
  for i=1,#str do\
    local chr = string.sub(str,i,i)\
    if chr == \" \" then\
      tbl[#tbl+1] = wrd\
      wrd = \"\"\
    else\
      wrd = wrd..chr\
    end\
  end\
  tbl[#tbl+1] = wrd\
  return tbl\
end\
\
local function run()\
\009while not boot or key do\
\009\009local event, side, x, y = pullEvent()\
\009\009if event == 'mouse_click' or event == 'key' then\
\009\009\009if not key then\
\009\009\009\009key = true\
\009\009\009\009paintutils.drawLine(1,ySize,xSize,ySize,background_color)\
\009\009\009end\
\009\009\009if event == 'key' and side >= 2 and side <= #drives+1 then\
\009\009\009\009bootFrom = side-1\
\009\009\009\009drawDrives()\
\009\009\009elseif event == 'key' and side == keys.up and bootFrom > 1 then\
\009\009\009\009bootFrom = bootFrom - 1\
\009\009\009\009drawDrives()\
\009\009\009elseif event == 'key' and side == keys.down and bootFrom < #drives then\
\009\009\009\009bootFrom = bootFrom + 1\
\009\009\009\009drawDrives()\
\009\009\009elseif event == 'key' and side == keys.e then\
\009\009\009\009paintutils.drawLine(1,6+#drives,xSize,6+#drives,background_color)\
\009\009\009\009term.setCursorPos(1,6+#drives)\
\009\009\009\009term.write('Args: ')\
\009\009\009\009local args = ''\
        local fr = true\
\009\009\009\009term.setCursorBlink(true)\
\009\009\009\009while true do\
\009\009\009\009\009local ev, sd = pullEvent()\
          if not fr then\
  \009\009\009\009\009if ev == 'key' then\
  \009\009\009\009\009\009if sd == keys.enter then\
  \009\009\009\009\009\009\009drives[bootFrom]['args'] = args\
  \009\009\009\009\009\009\009term.setCursorPos(7,6+#drives)\
  \009\009\009\009\009\009\009term.write(drives[bootFrom]['args'])\
  \009\009\009\009\009\009\009boot = true\
  \009\009\009\009\009\009\009key = false\
  \009\009\009\009\009\009\009break\
  \009\009\009\009\009\009elseif sd == keys.backspace then\
  \009\009\009\009\009\009\009args = string.sub(args,1,#args-1)\
  \009\009\009\009\009\009\009term.setCursorPos(7+#args,6+#drives)\
  \009\009\009\009\009\009\009term.write(' ')\
  \009\009\009\009\009\009end\
  \009\009\009\009\009elseif ev == 'char' and sd ~= nil then\
  \009\009\009\009\009\009args = args..sd\
  \009\009\009\009\009end\
  \009\009\009\009\009term.setCursorPos(7,6+#drives)\
  \009\009\009\009\009term.write(args)\
          else\
            fr = false\
          end\
\009\009\009\009end\
\009\009\009\009term.setCursorBlink(false)\
\009\009\009elseif event == 'key' and side == keys.enter then\
\009\009\009\009break\
\009\009\009end\
\009\009end\
\009end\
end\
\
local function timer()\
\009for i=1,waitFor do\
\009\009if not key then\
\009\009\009term.setCursorPos(1,ySize)\
\009\009\009term.write('Waiting '..(waitFor+1-i)..' sec')\
\009\009\009sleep(1)\
\009\009\009paintutils.drawLine(1,ySize,xSize,ySize,background_color)\
\009\009else\
\009\009\009while true do\
\009\009\009\009sleep(1)\
\009\009\009end\
\009\009end\
\009end\
\009boot = true\
end\
\
parallel.waitForAny(run,timer)\
\
local argsTable = strToTable(drives[bootFrom]['args'])\
--term.setCursorPos(1,ySize-1)\
--print(drives[bootFrom]['args'])\
--term.write('Booting from '..drives[bootFrom]['name'])\
sleep(0)\
term.setBackgroundColor(colors.black)\
term.clear()\
term.setCursorPos(1,1)\
local osError\
if drives[bootFrom]['path'] ~= \"\" then\
  osError = os.run({shell = shell},drives[bootFrom]['path'],unpack(argsTable))\
else\
  shell.run(\"shell\")\
end\
\
if osError then\
\009term.redirect(term.native())\
\009term.setBackgroundColor(background_color)\
\009term.clear()\
\009term.setTextColor(text_color)\
\009term.setCursorPos(2,2)\
\009term.write('OS has been crashed')\
\009term.setCursorPos(2,5)\
\009term.setTextColor(colors.red)\
\009print('Error in: '..osError)\
\009term.setTextColor(text_color)\
\009term.setCursorPos(2,ySize-2)\
\009term.write('Press any key to reboot')\
\009term.setCursorPos(2,ySize-1)\
\009term.write('Press Enter to shutdown')\
\009while true do\
\009\009local event, side = os.pullEvent()\
\009\009if event == 'key' or event == 'mouse_click' then\
\009\009\009if event == 'key' and side == keys.enter then\
\009\009\009\009os.shutdown()\
\009\009\009else\
\009\009\009\009os.reboot()\
\009\009\009end\
\009\009end\
\009end\
else\
  os.reboot()\
end",
    path = "startup",
  },
}